// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// Represents personnel working at a facility.
// Interface for different types of facility personnel.
type Personnel interface {
	IsPersonnel()
	// Unique identifier for the personnel
	GetID() string
	// Full name of the personnel
	GetName() string
	// Email address for communication
	GetEmail() string
	// Phone number for contact
	GetPhone() string
	// Date when the personnel joined the facility
	GetJoinedAt() string
	// Current employment status
	GetStatus() PersonnelStatus
}

// Input for adding an associate to a facility.
// Contains information needed to create and assign an associate.
type AddAssociateInput struct {
	// Full name of the associate
	Name string `json:"name"`
	// Email address for communication
	Email string `json:"email"`
	// Phone number for contact
	Phone string `json:"phone"`
	// Job title or role
	JobTitle string `json:"jobTitle"`
	// Department or work area
	Department string `json:"department"`
	// ID of the manager this associate reports to
	ReportsToID *string `json:"reportsToId,omitempty"`
	// Date when the associate joined (ISO 8601 format)
	JoinedAt string `json:"joinedAt"`
}

// Input for adding a manager to a facility.
// Contains information needed to create and assign a manager.
type AddManagerInput struct {
	// Full name of the manager
	Name string `json:"name"`
	// Email address for communication
	Email string `json:"email"`
	// Phone number for contact
	Phone string `json:"phone"`
	// Department or area of responsibility
	Department string `json:"department"`
	// Management level (1-5, where 5 is highest)
	Level int `json:"level"`
	// Date when the manager joined (ISO 8601 format)
	JoinedAt string `json:"joinedAt"`
}

// Represents an associate at a facility.
// Performs operational tasks and reports to managers.
type Associate struct {
	// Unique identifier for the associate
	ID string `json:"id"`
	// Full name of the associate
	Name string `json:"name"`
	// Email address for communication
	Email string `json:"email"`
	// Phone number for contact
	Phone string `json:"phone"`
	// Date when the associate joined the facility
	JoinedAt string `json:"joinedAt"`
	// Current employment status
	Status PersonnelStatus `json:"status"`
	// Job title or role
	JobTitle string `json:"jobTitle"`
	// Department or work area
	Department string `json:"department"`
	// Manager this associate reports to
	ReportsTo *Manager `json:"reportsTo,omitempty"`
}

func (Associate) IsPersonnel() {}

// Unique identifier for the personnel
func (this Associate) GetID() string { return this.ID }

// Full name of the personnel
func (this Associate) GetName() string { return this.Name }

// Email address for communication
func (this Associate) GetEmail() string { return this.Email }

// Phone number for contact
func (this Associate) GetPhone() string { return this.Phone }

// Date when the personnel joined the facility
func (this Associate) GetJoinedAt() string { return this.JoinedAt }

// Current employment status
func (this Associate) GetStatus() PersonnelStatus { return this.Status }

// Input for completing maintenance activities.
// Contains information needed to mark maintenance as completed.
type CompleteMaintenanceInput struct {
	// Actual completion date (ISO 8601 format)
	CompletedDate string `json:"completedDate"`
	// Actual duration in hours
	ActualDuration int `json:"actualDuration"`
	// Actual cost of maintenance
	Cost *float64 `json:"cost,omitempty"`
	// Completion notes and observations
	Notes *string `json:"notes,omitempty"`
}

// Represents contact information for facilities.
// Contains communication details for facility management.
type ContactInfo struct {
	// Primary contact phone number
	Phone string `json:"phone"`
	// Email address for facility communications
	Email string `json:"email"`
	// Emergency contact phone number
	EmergencyPhone *string `json:"emergencyPhone,omitempty"`
	// Facility manager contact information
	ManagerContact *string `json:"managerContact,omitempty"`
}

// Input for contact information.
// Contains communication details for facilities.
type ContactInfoInput struct {
	// Primary contact phone number
	Phone string `json:"phone"`
	// Email address
	Email string `json:"email"`
	// Emergency contact phone number
	EmergencyPhone *string `json:"emergencyPhone,omitempty"`
	// Facility manager contact
	ManagerContact *string `json:"managerContact,omitempty"`
}

// Input for creating new industrial equipment.
// Contains all necessary information to register equipment in the system.
type CreateEquipmentInput struct {
	// Name of the equipment
	Name string `json:"name"`
	// Description of the equipment
	Description string `json:"description"`
	// Manufacturer of the equipment
	Manufacturer string `json:"manufacturer"`
	// Model number or designation
	Model string `json:"model"`
	// Serial number for identification
	SerialNumber string `json:"serialNumber"`
	// Type of equipment
	Type EquipmentType `json:"type"`
	// ID of the facility where equipment is located
	FacilityID string `json:"facilityId"`
	// Equipment specifications
	Specifications *EquipmentSpecificationsInput `json:"specifications"`
	// Installation date (ISO 8601 format)
	InstalledAt string `json:"installedAt"`
}

// Input for creating new manufacturing facilities.
// Contains information needed to establish a new facility.
type CreateFacilityInput struct {
	// Name of the facility
	Name string `json:"name"`
	// Physical address
	Address string `json:"address"`
	// Geographic location
	Location *LocationInput `json:"location"`
	// Production capacity
	Capacity int `json:"capacity"`
	// Operational start date (ISO 8601 format)
	OperationalSince string `json:"operationalSince"`
	// Facility manager name
	Manager string `json:"manager"`
	// Contact information
	ContactInfo *ContactInfoInput `json:"contactInfo"`
}

// Represents equipment dimensions.
// Contains length, width, and height measurements.
type Dimensions struct {
	// Length in meters
	Length float64 `json:"length"`
	// Width in meters
	Width float64 `json:"width"`
	// Height in meters
	Height float64 `json:"height"`
}

// Input for equipment dimensions.
// Contains length, width, and height measurements.
type DimensionsInput struct {
	// Length in meters
	Length float64 `json:"length"`
	// Width in meters
	Width float64 `json:"width"`
	// Height in meters
	Height float64 `json:"height"`
}

// Represents electrical specifications for equipment.
// Contains voltage, current, and power requirements.
type ElectricalSpecs struct {
	// Operating voltage in volts
	Voltage float64 `json:"voltage"`
	// Operating current in amperes
	Current float64 `json:"current"`
	// Power factor
	PowerFactor float64 `json:"powerFactor"`
	// Frequency in hertz
	Frequency float64 `json:"frequency"`
}

// Input for electrical specifications.
// Contains voltage, current, and power requirements.
type ElectricalSpecsInput struct {
	// Operating voltage in volts
	Voltage float64 `json:"voltage"`
	// Operating current in amperes
	Current float64 `json:"current"`
	// Power factor
	PowerFactor float64 `json:"powerFactor"`
	// Frequency in hertz
	Frequency float64 `json:"frequency"`
}

// Represents a piece of industrial equipment in the manufacturing system.
// Contains comprehensive information about machinery specifications, status, and operational data.
type Equipment struct {
	// Unique identifier for the equipment
	ID string `json:"id"`
	// Human-readable name of the equipment
	Name string `json:"name"`
	// Detailed description of the equipment and its purpose
	Description string `json:"description"`
	// Manufacturer of the equipment
	Manufacturer string `json:"manufacturer"`
	// Model number or designation of the equipment
	Model string `json:"model"`
	// Serial number for unique identification
	SerialNumber string `json:"serialNumber"`
	// Type or category of equipment (e.g., CNC_MILL, CONVEYOR_BELT, ROBOTIC_ARM)
	Type EquipmentType `json:"type"`
	// Current operational status of the equipment
	Status EquipmentStatus `json:"status"`
	// Facility where the equipment is located
	Facility *Facility `json:"facility"`
	// Specifications and technical parameters of the equipment
	Specifications *EquipmentSpecifications `json:"specifications"`
	// Installation date of the equipment
	InstalledAt string `json:"installedAt"`
	// Last maintenance date
	LastMaintenanceAt *string `json:"lastMaintenanceAt,omitempty"`
	// Next scheduled maintenance date
	NextMaintenanceAt *string `json:"nextMaintenanceAt,omitempty"`
	// Current operational efficiency percentage (0-100)
	Efficiency float64 `json:"efficiency"`
	// Total operating hours since installation
	TotalOperatingHours int `json:"totalOperatingHours"`
	// Maintenance records for this equipment
	MaintenanceRecords []*MaintenanceRecord `json:"maintenanceRecords"`
	// Current alerts or issues with the equipment
	Alerts []*EquipmentAlert `json:"alerts"`
}

// Represents an alert or issue with equipment.
// Tracks equipment problems, warnings, and maintenance needs.
type EquipmentAlert struct {
	// Unique identifier for the alert
	ID string `json:"id"`
	// Equipment this alert relates to
	Equipment *Equipment `json:"equipment"`
	// Type of alert or issue
	Type AlertType `json:"type"`
	// Severity level of the alert
	Severity AlertSeverity `json:"severity"`
	// Description of the alert or issue
	Description string `json:"description"`
	// Date and time when the alert was generated
	GeneratedAt string `json:"generatedAt"`
	// Whether the alert has been acknowledged
	Acknowledged bool `json:"acknowledged"`
	// Date when the alert was acknowledged
	AcknowledgedAt *string `json:"acknowledgedAt,omitempty"`
	// Person who acknowledged the alert
	AcknowledgedBy *string `json:"acknowledgedBy,omitempty"`
	// Resolution status of the alert
	Resolved bool `json:"resolved"`
	// Date when the alert was resolved
	ResolvedAt *string `json:"resolvedAt,omitempty"`
}

// Represents equipment specifications and technical parameters.
// Contains detailed technical information about machinery capabilities.
type EquipmentSpecifications struct {
	// Power consumption in kilowatts
	PowerConsumption float64 `json:"powerConsumption"`
	// Maximum operating speed or capacity
	MaxSpeed float64 `json:"maxSpeed"`
	// Operating temperature range in Celsius
	OperatingTemperature *TemperatureRange `json:"operatingTemperature"`
	// Weight of the equipment in kilograms
	Weight float64 `json:"weight"`
	// Dimensions of the equipment (length x width x height)
	Dimensions *Dimensions `json:"dimensions"`
	// Required voltage and electrical specifications
	ElectricalSpecs *ElectricalSpecs `json:"electricalSpecs"`
	// Environmental requirements (humidity, dust, etc.)
	EnvironmentalRequirements []string `json:"environmentalRequirements"`
	// Safety certifications and compliance standards
	Certifications []string `json:"certifications"`
}

// Input for equipment specifications.
// Contains technical parameters and capabilities.
type EquipmentSpecificationsInput struct {
	// Power consumption in kilowatts
	PowerConsumption float64 `json:"powerConsumption"`
	// Maximum operating speed or capacity
	MaxSpeed float64 `json:"maxSpeed"`
	// Operating temperature range
	OperatingTemperature *TemperatureRangeInput `json:"operatingTemperature"`
	// Weight in kilograms
	Weight float64 `json:"weight"`
	// Equipment dimensions
	Dimensions *DimensionsInput `json:"dimensions"`
	// Electrical specifications
	ElectricalSpecs *ElectricalSpecsInput `json:"electricalSpecs"`
	// Environmental requirements
	EnvironmentalRequirements []string `json:"environmentalRequirements"`
	// Safety certifications
	Certifications []string `json:"certifications"`
}

// Represents a manufacturing facility containing industrial equipment.
// Manages facility-level operations, capacity, and equipment inventory.
type Facility struct {
	// Unique identifier for the facility
	ID string `json:"id"`
	// Name of the manufacturing facility
	Name string `json:"name"`
	// Physical address of the facility
	Address string `json:"address"`
	// Geographic location coordinates
	Location *Location `json:"location"`
	// Total production capacity of the facility
	Capacity int `json:"capacity"`
	// Current utilization percentage (0-100)
	Utilization float64 `json:"utilization"`
	// Operational status of the facility
	Status FacilityOperationalStatus `json:"status"`
	// Date when the facility became operational
	OperationalSince string `json:"operationalSince"`
	// Equipment inventory in this facility
	Equipment []*Equipment `json:"equipment"`
	// Facility manager responsible for operations
	Manager string `json:"manager"`
	// Contact information for the facility
	ContactInfo *ContactInfo `json:"contactInfo"`
	// Personnel working at this facility
	Personnel []Personnel `json:"personnel"`
}

// Represents the current status of a manufacturing facility.
// Provides real-time operational information and alerts.
type FacilityStatus struct {
	// Facility this status relates to
	Facility *Facility `json:"facility"`
	// Current operational status
	Status FacilityOperationalStatus `json:"status"`
	// Number of equipment units currently running
	EquipmentRunning int `json:"equipmentRunning"`
	// Number of equipment units currently stopped
	EquipmentStopped int `json:"equipmentStopped"`
	// Number of equipment units in maintenance
	EquipmentInMaintenance int `json:"equipmentInMaintenance"`
	// Number of active alerts in the facility
	ActiveAlerts int `json:"activeAlerts"`
	// Current production rate (units per hour)
	ProductionRate float64 `json:"productionRate"`
	// Overall facility efficiency percentage
	Efficiency float64 `json:"efficiency"`
	// Last updated timestamp
	LastUpdated string `json:"lastUpdated"`
}

// Represents geographic location coordinates.
// Used for facility and equipment location tracking.
type Location struct {
	// Latitude coordinate
	Latitude float64 `json:"latitude"`
	// Longitude coordinate
	Longitude float64 `json:"longitude"`
	// Altitude above sea level in meters
	Altitude *float64 `json:"altitude,omitempty"`
}

// Input for geographic location.
// Contains latitude, longitude, and optional altitude.
type LocationInput struct {
	// Latitude coordinate
	Latitude float64 `json:"latitude"`
	// Longitude coordinate
	Longitude float64 `json:"longitude"`
	// Altitude above sea level in meters
	Altitude *float64 `json:"altitude,omitempty"`
}

// Represents a maintenance record for industrial equipment.
// Tracks maintenance activities, schedules, and completion status.
type MaintenanceRecord struct {
	// Unique identifier for the maintenance record
	ID string `json:"id"`
	// Equipment being maintained
	Equipment *Equipment `json:"equipment"`
	// Type of maintenance activity
	Type MaintenanceType `json:"type"`
	// Priority level of the maintenance
	Priority MaintenancePriority `json:"priority"`
	// Scheduled date for the maintenance
	ScheduledDate string `json:"scheduledDate"`
	// Actual completion date (null if not completed)
	CompletedDate *string `json:"completedDate,omitempty"`
	// Status of the maintenance activity
	Status MaintenanceStatus `json:"status"`
	// Description of the maintenance work to be performed
	Description string `json:"description"`
	// Technician assigned to perform the maintenance
	AssignedTechnician string `json:"assignedTechnician"`
	// Estimated duration in hours
	EstimatedDuration int `json:"estimatedDuration"`
	// Actual duration in hours (null if not completed)
	ActualDuration *int `json:"actualDuration,omitempty"`
	// Parts or materials required for the maintenance
	RequiredParts []string `json:"requiredParts"`
	// Cost of the maintenance activity
	Cost *float64 `json:"cost,omitempty"`
	// Notes or observations from the maintenance
	Notes *string `json:"notes,omitempty"`
}

// Represents a manager at a facility.
// Manages operations and oversees other personnel.
type Manager struct {
	// Unique identifier for the manager
	ID string `json:"id"`
	// Full name of the manager
	Name string `json:"name"`
	// Email address for communication
	Email string `json:"email"`
	// Phone number for contact
	Phone string `json:"phone"`
	// Date when the manager joined the facility
	JoinedAt string `json:"joinedAt"`
	// Current employment status
	Status PersonnelStatus `json:"status"`
	// Department or area of responsibility
	Department string `json:"department"`
	// Number of direct reports
	DirectReports int `json:"directReports"`
	// Management level (1-5, where 5 is highest)
	Level int `json:"level"`
}

func (Manager) IsPersonnel() {}

// Unique identifier for the personnel
func (this Manager) GetID() string { return this.ID }

// Full name of the personnel
func (this Manager) GetName() string { return this.Name }

// Email address for communication
func (this Manager) GetEmail() string { return this.Email }

// Phone number for contact
func (this Manager) GetPhone() string { return this.Phone }

// Date when the personnel joined the facility
func (this Manager) GetJoinedAt() string { return this.JoinedAt }

// Current employment status
func (this Manager) GetStatus() PersonnelStatus { return this.Status }

// Root mutation type for modifying industrial machinery data.
// Provides capabilities to add, update, and manage equipment, facilities, and maintenance operations.
type Mutation struct {
}

// Represents operational metrics and performance data.
// Tracks key performance indicators and efficiency measurements.
type OperationalMetric struct {
	// Unique identifier for the metric record
	ID string `json:"id"`
	// Equipment this metric relates to
	Equipment *Equipment `json:"equipment"`
	// Type of metric being measured
	MetricType MetricType `json:"metricType"`
	// Value of the metric
	Value float64 `json:"value"`
	// Unit of measurement for the metric
	Unit string `json:"unit"`
	// Date and time when the metric was recorded
	RecordedAt string `json:"recordedAt"`
	// Target or expected value for this metric
	TargetValue *float64 `json:"targetValue,omitempty"`
	// Whether the metric meets the target threshold
	MeetsTarget bool `json:"meetsTarget"`
	// Additional context or notes about the metric
	Notes *string `json:"notes,omitempty"`
}

// Root query type for retrieving industrial machinery data.
// Provides access to equipment, facilities, maintenance records, and operational metrics.
type Query struct {
}

// Input for recording operational metrics.
// Contains performance data and measurements.
type RecordOperationalMetricInput struct {
	// ID of equipment this metric relates to
	EquipmentID string `json:"equipmentId"`
	// Type of metric being recorded
	MetricType MetricType `json:"metricType"`
	// Value of the metric
	Value float64 `json:"value"`
	// Unit of measurement
	Unit string `json:"unit"`
	// Target or expected value
	TargetValue *float64 `json:"targetValue,omitempty"`
	// Additional notes or context
	Notes *string `json:"notes,omitempty"`
}

// Input for scheduling maintenance activities.
// Contains information needed to create a maintenance record.
type ScheduleMaintenanceInput struct {
	// ID of equipment to be maintained
	EquipmentID string `json:"equipmentId"`
	// Type of maintenance
	Type MaintenanceType `json:"type"`
	// Priority level
	Priority MaintenancePriority `json:"priority"`
	// Scheduled date (ISO 8601 format)
	ScheduledDate string `json:"scheduledDate"`
	// Description of maintenance work
	Description string `json:"description"`
	// Assigned technician
	AssignedTechnician string `json:"assignedTechnician"`
	// Estimated duration in hours
	EstimatedDuration int `json:"estimatedDuration"`
	// Required parts or materials
	RequiredParts []string `json:"requiredParts,omitempty"`
}

// Represents temperature range specifications.
// Defines minimum and maximum operating temperatures.
type TemperatureRange struct {
	// Minimum operating temperature in Celsius
	Min float64 `json:"min"`
	// Maximum operating temperature in Celsius
	Max float64 `json:"max"`
}

// Input for temperature range.
// Defines minimum and maximum operating temperatures.
type TemperatureRangeInput struct {
	// Minimum temperature in Celsius
	Min float64 `json:"min"`
	// Maximum temperature in Celsius
	Max float64 `json:"max"`
}

// Input for updating existing equipment.
// Allows modification of equipment information and specifications.
type UpdateEquipmentInput struct {
	// Updated name of the equipment
	Name *string `json:"name,omitempty"`
	// Updated description
	Description *string `json:"description,omitempty"`
	// Updated manufacturer information
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Updated model information
	Model *string `json:"model,omitempty"`
	// Updated serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Updated equipment type
	Type *EquipmentType `json:"type,omitempty"`
	// Updated facility ID
	FacilityID *string `json:"facilityId,omitempty"`
	// Updated specifications
	Specifications *EquipmentSpecificationsInput `json:"specifications,omitempty"`
	// Updated installation date
	InstalledAt *string `json:"installedAt,omitempty"`
}

// Input for updating facility information.
// Allows modification of facility details and parameters.
type UpdateFacilityInput struct {
	// Updated facility name
	Name *string `json:"name,omitempty"`
	// Updated address
	Address *string `json:"address,omitempty"`
	// Updated location
	Location *LocationInput `json:"location,omitempty"`
	// Updated capacity
	Capacity *int `json:"capacity,omitempty"`
	// Updated operational date
	OperationalSince *string `json:"operationalSince,omitempty"`
	// Updated manager
	Manager *string `json:"manager,omitempty"`
	// Updated contact information
	ContactInfo *ContactInfoInput `json:"contactInfo,omitempty"`
}

// Input for updating maintenance records.
// Allows modification of maintenance details and status.
type UpdateMaintenanceRecordInput struct {
	// Updated maintenance type
	Type *MaintenanceType `json:"type,omitempty"`
	// Updated priority
	Priority *MaintenancePriority `json:"priority,omitempty"`
	// Updated scheduled date
	ScheduledDate *string `json:"scheduledDate,omitempty"`
	// Updated description
	Description *string `json:"description,omitempty"`
	// Updated assigned technician
	AssignedTechnician *string `json:"assignedTechnician,omitempty"`
	// Updated estimated duration
	EstimatedDuration *int `json:"estimatedDuration,omitempty"`
	// Updated required parts
	RequiredParts []string `json:"requiredParts,omitempty"`
	// Updated status
	Status *MaintenanceStatus `json:"status,omitempty"`
}

// Severity levels for equipment alerts.
// Indicates the urgency and impact of equipment issues.
type AlertSeverity string

const (
	// Critical severity requiring immediate action
	AlertSeverityCritical AlertSeverity = "CRITICAL"
	// High severity requiring prompt attention
	AlertSeverityHigh AlertSeverity = "HIGH"
	// Medium severity for normal attention
	AlertSeverityMedium AlertSeverity = "MEDIUM"
	// Low severity for routine monitoring
	AlertSeverityLow AlertSeverity = "LOW"
	// Informational alert for awareness
	AlertSeverityInfo AlertSeverity = "INFO"
)

var AllAlertSeverity = []AlertSeverity{
	AlertSeverityCritical,
	AlertSeverityHigh,
	AlertSeverityMedium,
	AlertSeverityLow,
	AlertSeverityInfo,
}

func (e AlertSeverity) IsValid() bool {
	switch e {
	case AlertSeverityCritical, AlertSeverityHigh, AlertSeverityMedium, AlertSeverityLow, AlertSeverityInfo:
		return true
	}
	return false
}

func (e AlertSeverity) String() string {
	return string(e)
}

func (e *AlertSeverity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertSeverity", str)
	}
	return nil
}

func (e AlertSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AlertSeverity) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AlertSeverity) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Types of equipment alerts and issues.
// Categorizes different types of equipment problems and warnings.
type AlertType string

const (
	// Temperature exceeds normal operating range
	AlertTypeTemperatureHigh AlertType = "TEMPERATURE_HIGH"
	// Temperature below normal operating range
	AlertTypeTemperatureLow AlertType = "TEMPERATURE_LOW"
	// Vibration levels exceed threshold
	AlertTypeVibrationHigh AlertType = "VIBRATION_HIGH"
	// Pressure readings outside normal range
	AlertTypePressureAbnormal AlertType = "PRESSURE_ABNORMAL"
	// Power consumption exceeds expected levels
	AlertTypePowerHigh AlertType = "POWER_HIGH"
	// Equipment stopped unexpectedly
	AlertTypeUnexpectedStop AlertType = "UNEXPECTED_STOP"
	// Maintenance due or overdue
	AlertTypeMaintenanceDue AlertType = "MAINTENANCE_DUE"
	// Safety system activation
	AlertTypeSafetyActivation AlertType = "SAFETY_ACTIVATION"
	// Communication error with equipment
	AlertTypeCommunicationError AlertType = "COMMUNICATION_ERROR"
	// Sensor malfunction or failure
	AlertTypeSensorFailure AlertType = "SENSOR_FAILURE"
	// General equipment fault
	AlertTypeEquipmentFault AlertType = "EQUIPMENT_FAULT"
)

var AllAlertType = []AlertType{
	AlertTypeTemperatureHigh,
	AlertTypeTemperatureLow,
	AlertTypeVibrationHigh,
	AlertTypePressureAbnormal,
	AlertTypePowerHigh,
	AlertTypeUnexpectedStop,
	AlertTypeMaintenanceDue,
	AlertTypeSafetyActivation,
	AlertTypeCommunicationError,
	AlertTypeSensorFailure,
	AlertTypeEquipmentFault,
}

func (e AlertType) IsValid() bool {
	switch e {
	case AlertTypeTemperatureHigh, AlertTypeTemperatureLow, AlertTypeVibrationHigh, AlertTypePressureAbnormal, AlertTypePowerHigh, AlertTypeUnexpectedStop, AlertTypeMaintenanceDue, AlertTypeSafetyActivation, AlertTypeCommunicationError, AlertTypeSensorFailure, AlertTypeEquipmentFault:
		return true
	}
	return false
}

func (e AlertType) String() string {
	return string(e)
}

func (e *AlertType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertType", str)
	}
	return nil
}

func (e AlertType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AlertType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AlertType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Operational status of industrial equipment.
// Indicates the current state of equipment operation.
type EquipmentStatus string

const (
	// Equipment is currently running and operational
	EquipmentStatusRunning EquipmentStatus = "RUNNING"
	// Equipment is stopped but ready for operation
	EquipmentStatusStopped EquipmentStatus = "STOPPED"
	// Equipment is in maintenance mode
	EquipmentStatusMaintenance EquipmentStatus = "MAINTENANCE"
	// Equipment has an error or fault condition
	EquipmentStatusError EquipmentStatus = "ERROR"
	// Equipment is offline or disconnected
	EquipmentStatusOffline EquipmentStatus = "OFFLINE"
	// Equipment is in standby mode
	EquipmentStatusStandby EquipmentStatus = "STANDBY"
	// Equipment is being set up or configured
	EquipmentStatusSetup EquipmentStatus = "SETUP"
)

var AllEquipmentStatus = []EquipmentStatus{
	EquipmentStatusRunning,
	EquipmentStatusStopped,
	EquipmentStatusMaintenance,
	EquipmentStatusError,
	EquipmentStatusOffline,
	EquipmentStatusStandby,
	EquipmentStatusSetup,
}

func (e EquipmentStatus) IsValid() bool {
	switch e {
	case EquipmentStatusRunning, EquipmentStatusStopped, EquipmentStatusMaintenance, EquipmentStatusError, EquipmentStatusOffline, EquipmentStatusStandby, EquipmentStatusSetup:
		return true
	}
	return false
}

func (e EquipmentStatus) String() string {
	return string(e)
}

func (e *EquipmentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EquipmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EquipmentStatus", str)
	}
	return nil
}

func (e EquipmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EquipmentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EquipmentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Types of industrial equipment in the manufacturing system.
// Categorizes equipment by function and operational characteristics.
type EquipmentType string

const (
	// Computer Numerical Control milling machine
	EquipmentTypeCncMill EquipmentType = "CNC_MILL"
	// Computer Numerical Control lathe
	EquipmentTypeCncLathe EquipmentType = "CNC_LATHE"
	// Conveyor belt system
	EquipmentTypeConveyorBelt EquipmentType = "CONVEYOR_BELT"
	// Robotic arm or manipulator
	EquipmentTypeRoboticArm EquipmentType = "ROBOTIC_ARM"
	// Industrial robot for assembly
	EquipmentTypeAssemblyRobot EquipmentType = "ASSEMBLY_ROBOT"
	// Welding machine or system
	EquipmentTypeWeldingMachine EquipmentType = "WELDING_MACHINE"
	// Press or stamping machine
	EquipmentTypePressMachine EquipmentType = "PRESS_MACHINE"
	// Quality control inspection equipment
	EquipmentTypeInspectionEquipment EquipmentType = "INSPECTION_EQUIPMENT"
	// Packaging machine
	EquipmentTypePackagingMachine EquipmentType = "PACKAGING_MACHINE"
	// Material handling equipment
	EquipmentTypeMaterialHandler EquipmentType = "MATERIAL_HANDLER"
	// Cutting or machining center
	EquipmentTypeMachiningCenter EquipmentType = "MACHINING_CENTER"
	// Grinding machine
	EquipmentTypeGrindingMachine EquipmentType = "GRINDING_MACHINE"
	// Drilling machine
	EquipmentTypeDrillingMachine EquipmentType = "DRILLING_MACHINE"
	// Other specialized equipment
	EquipmentTypeOther EquipmentType = "OTHER"
)

var AllEquipmentType = []EquipmentType{
	EquipmentTypeCncMill,
	EquipmentTypeCncLathe,
	EquipmentTypeConveyorBelt,
	EquipmentTypeRoboticArm,
	EquipmentTypeAssemblyRobot,
	EquipmentTypeWeldingMachine,
	EquipmentTypePressMachine,
	EquipmentTypeInspectionEquipment,
	EquipmentTypePackagingMachine,
	EquipmentTypeMaterialHandler,
	EquipmentTypeMachiningCenter,
	EquipmentTypeGrindingMachine,
	EquipmentTypeDrillingMachine,
	EquipmentTypeOther,
}

func (e EquipmentType) IsValid() bool {
	switch e {
	case EquipmentTypeCncMill, EquipmentTypeCncLathe, EquipmentTypeConveyorBelt, EquipmentTypeRoboticArm, EquipmentTypeAssemblyRobot, EquipmentTypeWeldingMachine, EquipmentTypePressMachine, EquipmentTypeInspectionEquipment, EquipmentTypePackagingMachine, EquipmentTypeMaterialHandler, EquipmentTypeMachiningCenter, EquipmentTypeGrindingMachine, EquipmentTypeDrillingMachine, EquipmentTypeOther:
		return true
	}
	return false
}

func (e EquipmentType) String() string {
	return string(e)
}

func (e *EquipmentType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EquipmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EquipmentType", str)
	}
	return nil
}

func (e EquipmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EquipmentType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EquipmentType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Operational status of manufacturing facilities.
// Indicates the current operational state of a facility.
type FacilityOperationalStatus string

const (
	// Facility is fully operational
	FacilityOperationalStatusOperational FacilityOperationalStatus = "OPERATIONAL"
	// Facility is partially operational
	FacilityOperationalStatusPartial FacilityOperationalStatus = "PARTIAL"
	// Facility is under maintenance
	FacilityOperationalStatusMaintenance FacilityOperationalStatus = "MAINTENANCE"
	// Facility is temporarily closed
	FacilityOperationalStatusClosed FacilityOperationalStatus = "CLOSED"
	// Facility is in emergency shutdown
	FacilityOperationalStatusEmergency FacilityOperationalStatus = "EMERGENCY"
)

var AllFacilityOperationalStatus = []FacilityOperationalStatus{
	FacilityOperationalStatusOperational,
	FacilityOperationalStatusPartial,
	FacilityOperationalStatusMaintenance,
	FacilityOperationalStatusClosed,
	FacilityOperationalStatusEmergency,
}

func (e FacilityOperationalStatus) IsValid() bool {
	switch e {
	case FacilityOperationalStatusOperational, FacilityOperationalStatusPartial, FacilityOperationalStatusMaintenance, FacilityOperationalStatusClosed, FacilityOperationalStatusEmergency:
		return true
	}
	return false
}

func (e FacilityOperationalStatus) String() string {
	return string(e)
}

func (e *FacilityOperationalStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FacilityOperationalStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FacilityOperationalStatus", str)
	}
	return nil
}

func (e FacilityOperationalStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FacilityOperationalStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FacilityOperationalStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Priority levels for maintenance activities.
// Indicates the urgency and importance of maintenance work.
type MaintenancePriority string

const (
	// Critical priority requiring immediate attention
	MaintenancePriorityCritical MaintenancePriority = "CRITICAL"
	// High priority requiring prompt attention
	MaintenancePriorityHigh MaintenancePriority = "HIGH"
	// Medium priority for normal scheduling
	MaintenancePriorityMedium MaintenancePriority = "MEDIUM"
	// Low priority for routine maintenance
	MaintenancePriorityLow MaintenancePriority = "LOW"
)

var AllMaintenancePriority = []MaintenancePriority{
	MaintenancePriorityCritical,
	MaintenancePriorityHigh,
	MaintenancePriorityMedium,
	MaintenancePriorityLow,
}

func (e MaintenancePriority) IsValid() bool {
	switch e {
	case MaintenancePriorityCritical, MaintenancePriorityHigh, MaintenancePriorityMedium, MaintenancePriorityLow:
		return true
	}
	return false
}

func (e MaintenancePriority) String() string {
	return string(e)
}

func (e *MaintenancePriority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MaintenancePriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MaintenancePriority", str)
	}
	return nil
}

func (e MaintenancePriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MaintenancePriority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MaintenancePriority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Status of maintenance activities.
// Tracks the progress and completion of maintenance work.
type MaintenanceStatus string

const (
	// Maintenance is scheduled but not started
	MaintenanceStatusScheduled MaintenanceStatus = "SCHEDULED"
	// Maintenance is currently in progress
	MaintenanceStatusInProgress MaintenanceStatus = "IN_PROGRESS"
	// Maintenance has been completed
	MaintenanceStatusCompleted MaintenanceStatus = "COMPLETED"
	// Maintenance has been cancelled
	MaintenanceStatusCancelled MaintenanceStatus = "CANCELLED"
	// Maintenance is overdue
	MaintenanceStatusOverdue MaintenanceStatus = "OVERDUE"
	// Maintenance is on hold
	MaintenanceStatusOnHold MaintenanceStatus = "ON_HOLD"
)

var AllMaintenanceStatus = []MaintenanceStatus{
	MaintenanceStatusScheduled,
	MaintenanceStatusInProgress,
	MaintenanceStatusCompleted,
	MaintenanceStatusCancelled,
	MaintenanceStatusOverdue,
	MaintenanceStatusOnHold,
}

func (e MaintenanceStatus) IsValid() bool {
	switch e {
	case MaintenanceStatusScheduled, MaintenanceStatusInProgress, MaintenanceStatusCompleted, MaintenanceStatusCancelled, MaintenanceStatusOverdue, MaintenanceStatusOnHold:
		return true
	}
	return false
}

func (e MaintenanceStatus) String() string {
	return string(e)
}

func (e *MaintenanceStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MaintenanceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MaintenanceStatus", str)
	}
	return nil
}

func (e MaintenanceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MaintenanceStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MaintenanceStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Types of maintenance activities for industrial equipment.
// Categorizes different types of maintenance work.
type MaintenanceType string

const (
	// Preventive maintenance to prevent failures
	MaintenanceTypePreventive MaintenanceType = "PREVENTIVE"
	// Corrective maintenance to fix issues
	MaintenanceTypeCorrective MaintenanceType = "CORRECTIVE"
	// Predictive maintenance based on condition monitoring
	MaintenanceTypePredictive MaintenanceType = "PREDICTIVE"
	// Emergency maintenance for urgent repairs
	MaintenanceTypeEmergency MaintenanceType = "EMERGENCY"
	// Routine inspection and testing
	MaintenanceTypeInspection MaintenanceType = "INSPECTION"
	// Calibration of equipment parameters
	MaintenanceTypeCalibration MaintenanceType = "CALIBRATION"
	// Cleaning and general upkeep
	MaintenanceTypeCleaning MaintenanceType = "CLEANING"
	// Replacement of worn or damaged parts
	MaintenanceTypeReplacement MaintenanceType = "REPLACEMENT"
)

var AllMaintenanceType = []MaintenanceType{
	MaintenanceTypePreventive,
	MaintenanceTypeCorrective,
	MaintenanceTypePredictive,
	MaintenanceTypeEmergency,
	MaintenanceTypeInspection,
	MaintenanceTypeCalibration,
	MaintenanceTypeCleaning,
	MaintenanceTypeReplacement,
}

func (e MaintenanceType) IsValid() bool {
	switch e {
	case MaintenanceTypePreventive, MaintenanceTypeCorrective, MaintenanceTypePredictive, MaintenanceTypeEmergency, MaintenanceTypeInspection, MaintenanceTypeCalibration, MaintenanceTypeCleaning, MaintenanceTypeReplacement:
		return true
	}
	return false
}

func (e MaintenanceType) String() string {
	return string(e)
}

func (e *MaintenanceType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MaintenanceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MaintenanceType", str)
	}
	return nil
}

func (e MaintenanceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MaintenanceType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MaintenanceType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Types of operational metrics and performance indicators.
// Categorizes different types of performance measurements.
type MetricType string

const (
	// Production output rate
	MetricTypeProductionRate MetricType = "PRODUCTION_RATE"
	// Equipment efficiency percentage
	MetricTypeEfficiency MetricType = "EFFICIENCY"
	// Energy consumption rate
	MetricTypeEnergyConsumption MetricType = "ENERGY_CONSUMPTION"
	// Quality defect rate
	MetricTypeQualityRate MetricType = "QUALITY_RATE"
	// Equipment uptime percentage
	MetricTypeUptime MetricType = "UPTIME"
	// Cycle time for operations
	MetricTypeCycleTime MetricType = "CYCLE_TIME"
	// Throughput capacity
	MetricTypeThroughput MetricType = "THROUGHPUT"
	// Temperature measurements
	MetricTypeTemperature MetricType = "TEMPERATURE"
	// Vibration levels
	MetricTypeVibration MetricType = "VIBRATION"
	// Pressure readings
	MetricTypePressure MetricType = "PRESSURE"
)

var AllMetricType = []MetricType{
	MetricTypeProductionRate,
	MetricTypeEfficiency,
	MetricTypeEnergyConsumption,
	MetricTypeQualityRate,
	MetricTypeUptime,
	MetricTypeCycleTime,
	MetricTypeThroughput,
	MetricTypeTemperature,
	MetricTypeVibration,
	MetricTypePressure,
}

func (e MetricType) IsValid() bool {
	switch e {
	case MetricTypeProductionRate, MetricTypeEfficiency, MetricTypeEnergyConsumption, MetricTypeQualityRate, MetricTypeUptime, MetricTypeCycleTime, MetricTypeThroughput, MetricTypeTemperature, MetricTypeVibration, MetricTypePressure:
		return true
	}
	return false
}

func (e MetricType) String() string {
	return string(e)
}

func (e *MetricType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MetricType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MetricType", str)
	}
	return nil
}

func (e MetricType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MetricType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MetricType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Employment status of facility personnel.
// Indicates the current employment state of personnel.
type PersonnelStatus string

const (
	// Personnel is actively employed
	PersonnelStatusActive PersonnelStatus = "ACTIVE"
	// Personnel is on leave
	PersonnelStatusOnLeave PersonnelStatus = "ON_LEAVE"
	// Personnel is temporarily suspended
	PersonnelStatusSuspended PersonnelStatus = "SUSPENDED"
	// Personnel has resigned
	PersonnelStatusResigned PersonnelStatus = "RESIGNED"
	// Personnel has been terminated
	PersonnelStatusTerminated PersonnelStatus = "TERMINATED"
)

var AllPersonnelStatus = []PersonnelStatus{
	PersonnelStatusActive,
	PersonnelStatusOnLeave,
	PersonnelStatusSuspended,
	PersonnelStatusResigned,
	PersonnelStatusTerminated,
}

func (e PersonnelStatus) IsValid() bool {
	switch e {
	case PersonnelStatusActive, PersonnelStatusOnLeave, PersonnelStatusSuspended, PersonnelStatusResigned, PersonnelStatusTerminated:
		return true
	}
	return false
}

func (e PersonnelStatus) String() string {
	return string(e)
}

func (e *PersonnelStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonnelStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonnelStatus", str)
	}
	return nil
}

func (e PersonnelStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PersonnelStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PersonnelStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
