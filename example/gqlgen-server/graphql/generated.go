// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/peterbeamish/go-mcp-graphql/example/gqlgen-server/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Associate struct {
		Department func(childComplexity int) int
		Email      func(childComplexity int) int
		ID         func(childComplexity int) int
		JobTitle   func(childComplexity int) int
		JoinedAt   func(childComplexity int) int
		Name       func(childComplexity int) int
		Phone      func(childComplexity int) int
		ReportsTo  func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	ContactInfo struct {
		Email          func(childComplexity int) int
		EmergencyPhone func(childComplexity int) int
		ManagerContact func(childComplexity int) int
		Phone          func(childComplexity int) int
	}

	Dimensions struct {
		Height func(childComplexity int) int
		Length func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	ElectricalSpecs struct {
		Current     func(childComplexity int) int
		Frequency   func(childComplexity int) int
		PowerFactor func(childComplexity int) int
		Voltage     func(childComplexity int) int
	}

	Equipment struct {
		Alerts              func(childComplexity int) int
		Description         func(childComplexity int) int
		Efficiency          func(childComplexity int) int
		Facility            func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstalledAt         func(childComplexity int) int
		LastMaintenanceAt   func(childComplexity int) int
		MaintenanceRecords  func(childComplexity int) int
		Manufacturer        func(childComplexity int) int
		Model               func(childComplexity int) int
		Name                func(childComplexity int) int
		NextMaintenanceAt   func(childComplexity int) int
		SerialNumber        func(childComplexity int) int
		Specifications      func(childComplexity int) int
		Status              func(childComplexity int) int
		TotalOperatingHours func(childComplexity int) int
		Type                func(childComplexity int) int
	}

	EquipmentAlert struct {
		Acknowledged   func(childComplexity int) int
		AcknowledgedAt func(childComplexity int) int
		AcknowledgedBy func(childComplexity int) int
		Description    func(childComplexity int) int
		Equipment      func(childComplexity int) int
		GeneratedAt    func(childComplexity int) int
		ID             func(childComplexity int) int
		Resolved       func(childComplexity int) int
		ResolvedAt     func(childComplexity int) int
		Severity       func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	EquipmentSpecifications struct {
		Certifications            func(childComplexity int) int
		Dimensions                func(childComplexity int) int
		ElectricalSpecs           func(childComplexity int) int
		EnvironmentalRequirements func(childComplexity int) int
		MaxSpeed                  func(childComplexity int) int
		OperatingTemperature      func(childComplexity int) int
		PowerConsumption          func(childComplexity int) int
		Weight                    func(childComplexity int) int
	}

	Facility struct {
		Address          func(childComplexity int) int
		Capacity         func(childComplexity int) int
		ContactInfo      func(childComplexity int) int
		Equipment        func(childComplexity int) int
		ID               func(childComplexity int) int
		Location         func(childComplexity int) int
		Manager          func(childComplexity int) int
		Name             func(childComplexity int) int
		OperationalSince func(childComplexity int) int
		Personnel        func(childComplexity int) int
		Status           func(childComplexity int) int
		Utilization      func(childComplexity int) int
	}

	FacilityStatus struct {
		ActiveAlerts           func(childComplexity int) int
		Efficiency             func(childComplexity int) int
		EquipmentInMaintenance func(childComplexity int) int
		EquipmentRunning       func(childComplexity int) int
		EquipmentStopped       func(childComplexity int) int
		Facility               func(childComplexity int) int
		LastUpdated            func(childComplexity int) int
		ProductionRate         func(childComplexity int) int
		Status                 func(childComplexity int) int
	}

	Location struct {
		Altitude  func(childComplexity int) int
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
	}

	MaintenanceRecord struct {
		ActualDuration     func(childComplexity int) int
		AssignedTechnician func(childComplexity int) int
		CompletedDate      func(childComplexity int) int
		Cost               func(childComplexity int) int
		Description        func(childComplexity int) int
		Equipment          func(childComplexity int) int
		EstimatedDuration  func(childComplexity int) int
		ID                 func(childComplexity int) int
		Notes              func(childComplexity int) int
		Priority           func(childComplexity int) int
		RequiredParts      func(childComplexity int) int
		ScheduledDate      func(childComplexity int) int
		Status             func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	MaintenanceReminder struct {
		Acknowledged   func(childComplexity int) int
		AcknowledgedAt func(childComplexity int) int
		AcknowledgedBy func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Description    func(childComplexity int) int
		Equipment      func(childComplexity int) int
		ID             func(childComplexity int) int
		Priority       func(childComplexity int) int
		ScheduledDate  func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	Manager struct {
		Department    func(childComplexity int) int
		DirectReports func(childComplexity int) int
		Email         func(childComplexity int) int
		ID            func(childComplexity int) int
		JoinedAt      func(childComplexity int) int
		Level         func(childComplexity int) int
		Name          func(childComplexity int) int
		Phone         func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	Mutation struct {
		AddAssociateToFacility      func(childComplexity int, facilityID string, input models.AddAssociateInput) int
		AddManagerToFacility        func(childComplexity int, facilityID string, input models.AddManagerInput) int
		AddOrgChainToFacility       func(childComplexity int, facilityID string, input models.AddOrgChainInput) int
		CompleteMaintenance         func(childComplexity int, id string, input models.CompleteMaintenanceInput) int
		CreateEquipment             func(childComplexity int, input models.CreateEquipmentInput) int
		CreateFacility              func(childComplexity int, input models.CreateFacilityInput) int
		DeleteEquipment             func(childComplexity int, id string) int
		DeleteFacility              func(childComplexity int, id string) int
		RecordOperationalMetric     func(childComplexity int, input models.RecordOperationalMetricInput) int
		RemovePersonnelFromFacility func(childComplexity int, facilityID string, personnelID string) int
		ScheduleMaintenance         func(childComplexity int, input models.ScheduleMaintenanceInput) int
		UpdateEquipment             func(childComplexity int, id string, input models.UpdateEquipmentInput) int
		UpdateEquipmentStatus       func(childComplexity int, id string, status models.EquipmentStatus, notes *string) int
		UpdateFacility              func(childComplexity int, id string, input models.UpdateFacilityInput) int
		UpdateMaintenanceRecord     func(childComplexity int, id string, input models.UpdateMaintenanceRecordInput) int
	}

	OperationalMetric struct {
		Equipment   func(childComplexity int) int
		ID          func(childComplexity int) int
		MeetsTarget func(childComplexity int) int
		MetricType  func(childComplexity int) int
		Notes       func(childComplexity int) int
		RecordedAt  func(childComplexity int) int
		TargetValue func(childComplexity int) int
		Unit        func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	PerformanceAlert struct {
		Acknowledged   func(childComplexity int) int
		AcknowledgedAt func(childComplexity int) int
		AcknowledgedBy func(childComplexity int) int
		CurrentValue   func(childComplexity int) int
		Description    func(childComplexity int) int
		Equipment      func(childComplexity int) int
		ExpectedValue  func(childComplexity int) int
		GeneratedAt    func(childComplexity int) int
		ID             func(childComplexity int) int
		MetricType     func(childComplexity int) int
		Severity       func(childComplexity int) int
		Threshold      func(childComplexity int) int
	}

	Query struct {
		Equipment                     func(childComplexity int) int
		EquipmentByID                 func(childComplexity int, id string) int
		EquipmentNotifications        func(childComplexity int) int
		Facilities                    func(childComplexity int) int
		FacilityByID                  func(childComplexity int, id string) int
		FacilityStatus                func(childComplexity int, facilityID string) int
		MaintenanceRecords            func(childComplexity int) int
		MaintenanceRecordsByEquipment func(childComplexity int, equipmentID string) int
		OperationalMetrics            func(childComplexity int) int
		Personnel                     func(childComplexity int) int
	}

	StatusUpdate struct {
		ChangedAt      func(childComplexity int) int
		ChangedBy      func(childComplexity int) int
		Description    func(childComplexity int) int
		Equipment      func(childComplexity int) int
		ID             func(childComplexity int) int
		NewStatus      func(childComplexity int) int
		Notes          func(childComplexity int) int
		PreviousStatus func(childComplexity int) int
	}

	TemperatureRange struct {
		Max func(childComplexity int) int
		Min func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateEquipment(ctx context.Context, input models.CreateEquipmentInput) (*models.Equipment, error)
	UpdateEquipment(ctx context.Context, id string, input models.UpdateEquipmentInput) (*models.Equipment, error)
	DeleteEquipment(ctx context.Context, id string) (bool, error)
	CreateFacility(ctx context.Context, input models.CreateFacilityInput) (*models.Facility, error)
	UpdateFacility(ctx context.Context, id string, input models.UpdateFacilityInput) (*models.Facility, error)
	DeleteFacility(ctx context.Context, id string) (bool, error)
	ScheduleMaintenance(ctx context.Context, input models.ScheduleMaintenanceInput) (*models.MaintenanceRecord, error)
	UpdateMaintenanceRecord(ctx context.Context, id string, input models.UpdateMaintenanceRecordInput) (*models.MaintenanceRecord, error)
	CompleteMaintenance(ctx context.Context, id string, input models.CompleteMaintenanceInput) (*models.MaintenanceRecord, error)
	RecordOperationalMetric(ctx context.Context, input models.RecordOperationalMetricInput) (*models.OperationalMetric, error)
	UpdateEquipmentStatus(ctx context.Context, id string, status models.EquipmentStatus, notes *string) (*models.Equipment, error)
	AddManagerToFacility(ctx context.Context, facilityID string, input models.AddManagerInput) (*models.Manager, error)
	AddAssociateToFacility(ctx context.Context, facilityID string, input models.AddAssociateInput) (*models.Associate, error)
	RemovePersonnelFromFacility(ctx context.Context, facilityID string, personnelID string) (bool, error)
	AddOrgChainToFacility(ctx context.Context, facilityID string, input models.AddOrgChainInput) ([]models.Personnel, error)
}
type QueryResolver interface {
	Equipment(ctx context.Context) ([]*models.Equipment, error)
	EquipmentByID(ctx context.Context, id string) (*models.Equipment, error)
	Facilities(ctx context.Context) ([]*models.Facility, error)
	FacilityByID(ctx context.Context, id string) (*models.Facility, error)
	MaintenanceRecords(ctx context.Context) ([]*models.MaintenanceRecord, error)
	MaintenanceRecordsByEquipment(ctx context.Context, equipmentID string) ([]*models.MaintenanceRecord, error)
	OperationalMetrics(ctx context.Context) ([]*models.OperationalMetric, error)
	FacilityStatus(ctx context.Context, facilityID string) (*models.FacilityStatus, error)
	Personnel(ctx context.Context) ([]models.Personnel, error)
	EquipmentNotifications(ctx context.Context) ([]models.EquipmentNotification, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Associate.department":
		if e.complexity.Associate.Department == nil {
			break
		}

		return e.complexity.Associate.Department(childComplexity), true
	case "Associate.email":
		if e.complexity.Associate.Email == nil {
			break
		}

		return e.complexity.Associate.Email(childComplexity), true
	case "Associate.id":
		if e.complexity.Associate.ID == nil {
			break
		}

		return e.complexity.Associate.ID(childComplexity), true
	case "Associate.jobTitle":
		if e.complexity.Associate.JobTitle == nil {
			break
		}

		return e.complexity.Associate.JobTitle(childComplexity), true
	case "Associate.joinedAt":
		if e.complexity.Associate.JoinedAt == nil {
			break
		}

		return e.complexity.Associate.JoinedAt(childComplexity), true
	case "Associate.name":
		if e.complexity.Associate.Name == nil {
			break
		}

		return e.complexity.Associate.Name(childComplexity), true
	case "Associate.phone":
		if e.complexity.Associate.Phone == nil {
			break
		}

		return e.complexity.Associate.Phone(childComplexity), true
	case "Associate.reportsTo":
		if e.complexity.Associate.ReportsTo == nil {
			break
		}

		return e.complexity.Associate.ReportsTo(childComplexity), true
	case "Associate.status":
		if e.complexity.Associate.Status == nil {
			break
		}

		return e.complexity.Associate.Status(childComplexity), true

	case "ContactInfo.email":
		if e.complexity.ContactInfo.Email == nil {
			break
		}

		return e.complexity.ContactInfo.Email(childComplexity), true
	case "ContactInfo.emergencyPhone":
		if e.complexity.ContactInfo.EmergencyPhone == nil {
			break
		}

		return e.complexity.ContactInfo.EmergencyPhone(childComplexity), true
	case "ContactInfo.managerContact":
		if e.complexity.ContactInfo.ManagerContact == nil {
			break
		}

		return e.complexity.ContactInfo.ManagerContact(childComplexity), true
	case "ContactInfo.phone":
		if e.complexity.ContactInfo.Phone == nil {
			break
		}

		return e.complexity.ContactInfo.Phone(childComplexity), true

	case "Dimensions.height":
		if e.complexity.Dimensions.Height == nil {
			break
		}

		return e.complexity.Dimensions.Height(childComplexity), true
	case "Dimensions.length":
		if e.complexity.Dimensions.Length == nil {
			break
		}

		return e.complexity.Dimensions.Length(childComplexity), true
	case "Dimensions.width":
		if e.complexity.Dimensions.Width == nil {
			break
		}

		return e.complexity.Dimensions.Width(childComplexity), true

	case "ElectricalSpecs.current":
		if e.complexity.ElectricalSpecs.Current == nil {
			break
		}

		return e.complexity.ElectricalSpecs.Current(childComplexity), true
	case "ElectricalSpecs.frequency":
		if e.complexity.ElectricalSpecs.Frequency == nil {
			break
		}

		return e.complexity.ElectricalSpecs.Frequency(childComplexity), true
	case "ElectricalSpecs.powerFactor":
		if e.complexity.ElectricalSpecs.PowerFactor == nil {
			break
		}

		return e.complexity.ElectricalSpecs.PowerFactor(childComplexity), true
	case "ElectricalSpecs.voltage":
		if e.complexity.ElectricalSpecs.Voltage == nil {
			break
		}

		return e.complexity.ElectricalSpecs.Voltage(childComplexity), true

	case "Equipment.alerts":
		if e.complexity.Equipment.Alerts == nil {
			break
		}

		return e.complexity.Equipment.Alerts(childComplexity), true
	case "Equipment.description":
		if e.complexity.Equipment.Description == nil {
			break
		}

		return e.complexity.Equipment.Description(childComplexity), true
	case "Equipment.efficiency":
		if e.complexity.Equipment.Efficiency == nil {
			break
		}

		return e.complexity.Equipment.Efficiency(childComplexity), true
	case "Equipment.facility":
		if e.complexity.Equipment.Facility == nil {
			break
		}

		return e.complexity.Equipment.Facility(childComplexity), true
	case "Equipment.id":
		if e.complexity.Equipment.ID == nil {
			break
		}

		return e.complexity.Equipment.ID(childComplexity), true
	case "Equipment.installedAt":
		if e.complexity.Equipment.InstalledAt == nil {
			break
		}

		return e.complexity.Equipment.InstalledAt(childComplexity), true
	case "Equipment.lastMaintenanceAt":
		if e.complexity.Equipment.LastMaintenanceAt == nil {
			break
		}

		return e.complexity.Equipment.LastMaintenanceAt(childComplexity), true
	case "Equipment.maintenanceRecords":
		if e.complexity.Equipment.MaintenanceRecords == nil {
			break
		}

		return e.complexity.Equipment.MaintenanceRecords(childComplexity), true
	case "Equipment.manufacturer":
		if e.complexity.Equipment.Manufacturer == nil {
			break
		}

		return e.complexity.Equipment.Manufacturer(childComplexity), true
	case "Equipment.model":
		if e.complexity.Equipment.Model == nil {
			break
		}

		return e.complexity.Equipment.Model(childComplexity), true
	case "Equipment.name":
		if e.complexity.Equipment.Name == nil {
			break
		}

		return e.complexity.Equipment.Name(childComplexity), true
	case "Equipment.nextMaintenanceAt":
		if e.complexity.Equipment.NextMaintenanceAt == nil {
			break
		}

		return e.complexity.Equipment.NextMaintenanceAt(childComplexity), true
	case "Equipment.serialNumber":
		if e.complexity.Equipment.SerialNumber == nil {
			break
		}

		return e.complexity.Equipment.SerialNumber(childComplexity), true
	case "Equipment.specifications":
		if e.complexity.Equipment.Specifications == nil {
			break
		}

		return e.complexity.Equipment.Specifications(childComplexity), true
	case "Equipment.status":
		if e.complexity.Equipment.Status == nil {
			break
		}

		return e.complexity.Equipment.Status(childComplexity), true
	case "Equipment.totalOperatingHours":
		if e.complexity.Equipment.TotalOperatingHours == nil {
			break
		}

		return e.complexity.Equipment.TotalOperatingHours(childComplexity), true
	case "Equipment.type":
		if e.complexity.Equipment.Type == nil {
			break
		}

		return e.complexity.Equipment.Type(childComplexity), true

	case "EquipmentAlert.acknowledged":
		if e.complexity.EquipmentAlert.Acknowledged == nil {
			break
		}

		return e.complexity.EquipmentAlert.Acknowledged(childComplexity), true
	case "EquipmentAlert.acknowledgedAt":
		if e.complexity.EquipmentAlert.AcknowledgedAt == nil {
			break
		}

		return e.complexity.EquipmentAlert.AcknowledgedAt(childComplexity), true
	case "EquipmentAlert.acknowledgedBy":
		if e.complexity.EquipmentAlert.AcknowledgedBy == nil {
			break
		}

		return e.complexity.EquipmentAlert.AcknowledgedBy(childComplexity), true
	case "EquipmentAlert.description":
		if e.complexity.EquipmentAlert.Description == nil {
			break
		}

		return e.complexity.EquipmentAlert.Description(childComplexity), true
	case "EquipmentAlert.equipment":
		if e.complexity.EquipmentAlert.Equipment == nil {
			break
		}

		return e.complexity.EquipmentAlert.Equipment(childComplexity), true
	case "EquipmentAlert.generatedAt":
		if e.complexity.EquipmentAlert.GeneratedAt == nil {
			break
		}

		return e.complexity.EquipmentAlert.GeneratedAt(childComplexity), true
	case "EquipmentAlert.id":
		if e.complexity.EquipmentAlert.ID == nil {
			break
		}

		return e.complexity.EquipmentAlert.ID(childComplexity), true
	case "EquipmentAlert.resolved":
		if e.complexity.EquipmentAlert.Resolved == nil {
			break
		}

		return e.complexity.EquipmentAlert.Resolved(childComplexity), true
	case "EquipmentAlert.resolvedAt":
		if e.complexity.EquipmentAlert.ResolvedAt == nil {
			break
		}

		return e.complexity.EquipmentAlert.ResolvedAt(childComplexity), true
	case "EquipmentAlert.severity":
		if e.complexity.EquipmentAlert.Severity == nil {
			break
		}

		return e.complexity.EquipmentAlert.Severity(childComplexity), true
	case "EquipmentAlert.type":
		if e.complexity.EquipmentAlert.Type == nil {
			break
		}

		return e.complexity.EquipmentAlert.Type(childComplexity), true

	case "EquipmentSpecifications.certifications":
		if e.complexity.EquipmentSpecifications.Certifications == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.Certifications(childComplexity), true
	case "EquipmentSpecifications.dimensions":
		if e.complexity.EquipmentSpecifications.Dimensions == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.Dimensions(childComplexity), true
	case "EquipmentSpecifications.electricalSpecs":
		if e.complexity.EquipmentSpecifications.ElectricalSpecs == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.ElectricalSpecs(childComplexity), true
	case "EquipmentSpecifications.environmentalRequirements":
		if e.complexity.EquipmentSpecifications.EnvironmentalRequirements == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.EnvironmentalRequirements(childComplexity), true
	case "EquipmentSpecifications.maxSpeed":
		if e.complexity.EquipmentSpecifications.MaxSpeed == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.MaxSpeed(childComplexity), true
	case "EquipmentSpecifications.operatingTemperature":
		if e.complexity.EquipmentSpecifications.OperatingTemperature == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.OperatingTemperature(childComplexity), true
	case "EquipmentSpecifications.powerConsumption":
		if e.complexity.EquipmentSpecifications.PowerConsumption == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.PowerConsumption(childComplexity), true
	case "EquipmentSpecifications.weight":
		if e.complexity.EquipmentSpecifications.Weight == nil {
			break
		}

		return e.complexity.EquipmentSpecifications.Weight(childComplexity), true

	case "Facility.address":
		if e.complexity.Facility.Address == nil {
			break
		}

		return e.complexity.Facility.Address(childComplexity), true
	case "Facility.capacity":
		if e.complexity.Facility.Capacity == nil {
			break
		}

		return e.complexity.Facility.Capacity(childComplexity), true
	case "Facility.contactInfo":
		if e.complexity.Facility.ContactInfo == nil {
			break
		}

		return e.complexity.Facility.ContactInfo(childComplexity), true
	case "Facility.equipment":
		if e.complexity.Facility.Equipment == nil {
			break
		}

		return e.complexity.Facility.Equipment(childComplexity), true
	case "Facility.id":
		if e.complexity.Facility.ID == nil {
			break
		}

		return e.complexity.Facility.ID(childComplexity), true
	case "Facility.location":
		if e.complexity.Facility.Location == nil {
			break
		}

		return e.complexity.Facility.Location(childComplexity), true
	case "Facility.manager":
		if e.complexity.Facility.Manager == nil {
			break
		}

		return e.complexity.Facility.Manager(childComplexity), true
	case "Facility.name":
		if e.complexity.Facility.Name == nil {
			break
		}

		return e.complexity.Facility.Name(childComplexity), true
	case "Facility.operationalSince":
		if e.complexity.Facility.OperationalSince == nil {
			break
		}

		return e.complexity.Facility.OperationalSince(childComplexity), true
	case "Facility.personnel":
		if e.complexity.Facility.Personnel == nil {
			break
		}

		return e.complexity.Facility.Personnel(childComplexity), true
	case "Facility.status":
		if e.complexity.Facility.Status == nil {
			break
		}

		return e.complexity.Facility.Status(childComplexity), true
	case "Facility.utilization":
		if e.complexity.Facility.Utilization == nil {
			break
		}

		return e.complexity.Facility.Utilization(childComplexity), true

	case "FacilityStatus.activeAlerts":
		if e.complexity.FacilityStatus.ActiveAlerts == nil {
			break
		}

		return e.complexity.FacilityStatus.ActiveAlerts(childComplexity), true
	case "FacilityStatus.efficiency":
		if e.complexity.FacilityStatus.Efficiency == nil {
			break
		}

		return e.complexity.FacilityStatus.Efficiency(childComplexity), true
	case "FacilityStatus.equipmentInMaintenance":
		if e.complexity.FacilityStatus.EquipmentInMaintenance == nil {
			break
		}

		return e.complexity.FacilityStatus.EquipmentInMaintenance(childComplexity), true
	case "FacilityStatus.equipmentRunning":
		if e.complexity.FacilityStatus.EquipmentRunning == nil {
			break
		}

		return e.complexity.FacilityStatus.EquipmentRunning(childComplexity), true
	case "FacilityStatus.equipmentStopped":
		if e.complexity.FacilityStatus.EquipmentStopped == nil {
			break
		}

		return e.complexity.FacilityStatus.EquipmentStopped(childComplexity), true
	case "FacilityStatus.facility":
		if e.complexity.FacilityStatus.Facility == nil {
			break
		}

		return e.complexity.FacilityStatus.Facility(childComplexity), true
	case "FacilityStatus.lastUpdated":
		if e.complexity.FacilityStatus.LastUpdated == nil {
			break
		}

		return e.complexity.FacilityStatus.LastUpdated(childComplexity), true
	case "FacilityStatus.productionRate":
		if e.complexity.FacilityStatus.ProductionRate == nil {
			break
		}

		return e.complexity.FacilityStatus.ProductionRate(childComplexity), true
	case "FacilityStatus.status":
		if e.complexity.FacilityStatus.Status == nil {
			break
		}

		return e.complexity.FacilityStatus.Status(childComplexity), true

	case "Location.altitude":
		if e.complexity.Location.Altitude == nil {
			break
		}

		return e.complexity.Location.Altitude(childComplexity), true
	case "Location.latitude":
		if e.complexity.Location.Latitude == nil {
			break
		}

		return e.complexity.Location.Latitude(childComplexity), true
	case "Location.longitude":
		if e.complexity.Location.Longitude == nil {
			break
		}

		return e.complexity.Location.Longitude(childComplexity), true

	case "MaintenanceRecord.actualDuration":
		if e.complexity.MaintenanceRecord.ActualDuration == nil {
			break
		}

		return e.complexity.MaintenanceRecord.ActualDuration(childComplexity), true
	case "MaintenanceRecord.assignedTechnician":
		if e.complexity.MaintenanceRecord.AssignedTechnician == nil {
			break
		}

		return e.complexity.MaintenanceRecord.AssignedTechnician(childComplexity), true
	case "MaintenanceRecord.completedDate":
		if e.complexity.MaintenanceRecord.CompletedDate == nil {
			break
		}

		return e.complexity.MaintenanceRecord.CompletedDate(childComplexity), true
	case "MaintenanceRecord.cost":
		if e.complexity.MaintenanceRecord.Cost == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Cost(childComplexity), true
	case "MaintenanceRecord.description":
		if e.complexity.MaintenanceRecord.Description == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Description(childComplexity), true
	case "MaintenanceRecord.equipment":
		if e.complexity.MaintenanceRecord.Equipment == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Equipment(childComplexity), true
	case "MaintenanceRecord.estimatedDuration":
		if e.complexity.MaintenanceRecord.EstimatedDuration == nil {
			break
		}

		return e.complexity.MaintenanceRecord.EstimatedDuration(childComplexity), true
	case "MaintenanceRecord.id":
		if e.complexity.MaintenanceRecord.ID == nil {
			break
		}

		return e.complexity.MaintenanceRecord.ID(childComplexity), true
	case "MaintenanceRecord.notes":
		if e.complexity.MaintenanceRecord.Notes == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Notes(childComplexity), true
	case "MaintenanceRecord.priority":
		if e.complexity.MaintenanceRecord.Priority == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Priority(childComplexity), true
	case "MaintenanceRecord.requiredParts":
		if e.complexity.MaintenanceRecord.RequiredParts == nil {
			break
		}

		return e.complexity.MaintenanceRecord.RequiredParts(childComplexity), true
	case "MaintenanceRecord.scheduledDate":
		if e.complexity.MaintenanceRecord.ScheduledDate == nil {
			break
		}

		return e.complexity.MaintenanceRecord.ScheduledDate(childComplexity), true
	case "MaintenanceRecord.status":
		if e.complexity.MaintenanceRecord.Status == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Status(childComplexity), true
	case "MaintenanceRecord.type":
		if e.complexity.MaintenanceRecord.Type == nil {
			break
		}

		return e.complexity.MaintenanceRecord.Type(childComplexity), true

	case "MaintenanceReminder.acknowledged":
		if e.complexity.MaintenanceReminder.Acknowledged == nil {
			break
		}

		return e.complexity.MaintenanceReminder.Acknowledged(childComplexity), true
	case "MaintenanceReminder.acknowledgedAt":
		if e.complexity.MaintenanceReminder.AcknowledgedAt == nil {
			break
		}

		return e.complexity.MaintenanceReminder.AcknowledgedAt(childComplexity), true
	case "MaintenanceReminder.acknowledgedBy":
		if e.complexity.MaintenanceReminder.AcknowledgedBy == nil {
			break
		}

		return e.complexity.MaintenanceReminder.AcknowledgedBy(childComplexity), true
	case "MaintenanceReminder.createdAt":
		if e.complexity.MaintenanceReminder.CreatedAt == nil {
			break
		}

		return e.complexity.MaintenanceReminder.CreatedAt(childComplexity), true
	case "MaintenanceReminder.description":
		if e.complexity.MaintenanceReminder.Description == nil {
			break
		}

		return e.complexity.MaintenanceReminder.Description(childComplexity), true
	case "MaintenanceReminder.equipment":
		if e.complexity.MaintenanceReminder.Equipment == nil {
			break
		}

		return e.complexity.MaintenanceReminder.Equipment(childComplexity), true
	case "MaintenanceReminder.id":
		if e.complexity.MaintenanceReminder.ID == nil {
			break
		}

		return e.complexity.MaintenanceReminder.ID(childComplexity), true
	case "MaintenanceReminder.priority":
		if e.complexity.MaintenanceReminder.Priority == nil {
			break
		}

		return e.complexity.MaintenanceReminder.Priority(childComplexity), true
	case "MaintenanceReminder.scheduledDate":
		if e.complexity.MaintenanceReminder.ScheduledDate == nil {
			break
		}

		return e.complexity.MaintenanceReminder.ScheduledDate(childComplexity), true
	case "MaintenanceReminder.type":
		if e.complexity.MaintenanceReminder.Type == nil {
			break
		}

		return e.complexity.MaintenanceReminder.Type(childComplexity), true

	case "Manager.department":
		if e.complexity.Manager.Department == nil {
			break
		}

		return e.complexity.Manager.Department(childComplexity), true
	case "Manager.directReports":
		if e.complexity.Manager.DirectReports == nil {
			break
		}

		return e.complexity.Manager.DirectReports(childComplexity), true
	case "Manager.email":
		if e.complexity.Manager.Email == nil {
			break
		}

		return e.complexity.Manager.Email(childComplexity), true
	case "Manager.id":
		if e.complexity.Manager.ID == nil {
			break
		}

		return e.complexity.Manager.ID(childComplexity), true
	case "Manager.joinedAt":
		if e.complexity.Manager.JoinedAt == nil {
			break
		}

		return e.complexity.Manager.JoinedAt(childComplexity), true
	case "Manager.level":
		if e.complexity.Manager.Level == nil {
			break
		}

		return e.complexity.Manager.Level(childComplexity), true
	case "Manager.name":
		if e.complexity.Manager.Name == nil {
			break
		}

		return e.complexity.Manager.Name(childComplexity), true
	case "Manager.phone":
		if e.complexity.Manager.Phone == nil {
			break
		}

		return e.complexity.Manager.Phone(childComplexity), true
	case "Manager.status":
		if e.complexity.Manager.Status == nil {
			break
		}

		return e.complexity.Manager.Status(childComplexity), true

	case "Mutation.addAssociateToFacility":
		if e.complexity.Mutation.AddAssociateToFacility == nil {
			break
		}

		args, err := ec.field_Mutation_addAssociateToFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAssociateToFacility(childComplexity, args["facilityId"].(string), args["input"].(models.AddAssociateInput)), true
	case "Mutation.addManagerToFacility":
		if e.complexity.Mutation.AddManagerToFacility == nil {
			break
		}

		args, err := ec.field_Mutation_addManagerToFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddManagerToFacility(childComplexity, args["facilityId"].(string), args["input"].(models.AddManagerInput)), true
	case "Mutation.addOrgChainToFacility":
		if e.complexity.Mutation.AddOrgChainToFacility == nil {
			break
		}

		args, err := ec.field_Mutation_addOrgChainToFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrgChainToFacility(childComplexity, args["facilityId"].(string), args["input"].(models.AddOrgChainInput)), true
	case "Mutation.completeMaintenance":
		if e.complexity.Mutation.CompleteMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_completeMaintenance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteMaintenance(childComplexity, args["id"].(string), args["input"].(models.CompleteMaintenanceInput)), true
	case "Mutation.createEquipment":
		if e.complexity.Mutation.CreateEquipment == nil {
			break
		}

		args, err := ec.field_Mutation_createEquipment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEquipment(childComplexity, args["input"].(models.CreateEquipmentInput)), true
	case "Mutation.createFacility":
		if e.complexity.Mutation.CreateFacility == nil {
			break
		}

		args, err := ec.field_Mutation_createFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFacility(childComplexity, args["input"].(models.CreateFacilityInput)), true
	case "Mutation.deleteEquipment":
		if e.complexity.Mutation.DeleteEquipment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEquipment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEquipment(childComplexity, args["id"].(string)), true
	case "Mutation.deleteFacility":
		if e.complexity.Mutation.DeleteFacility == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFacility(childComplexity, args["id"].(string)), true
	case "Mutation.recordOperationalMetric":
		if e.complexity.Mutation.RecordOperationalMetric == nil {
			break
		}

		args, err := ec.field_Mutation_recordOperationalMetric_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordOperationalMetric(childComplexity, args["input"].(models.RecordOperationalMetricInput)), true
	case "Mutation.removePersonnelFromFacility":
		if e.complexity.Mutation.RemovePersonnelFromFacility == nil {
			break
		}

		args, err := ec.field_Mutation_removePersonnelFromFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemovePersonnelFromFacility(childComplexity, args["facilityId"].(string), args["personnelId"].(string)), true
	case "Mutation.scheduleMaintenance":
		if e.complexity.Mutation.ScheduleMaintenance == nil {
			break
		}

		args, err := ec.field_Mutation_scheduleMaintenance_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ScheduleMaintenance(childComplexity, args["input"].(models.ScheduleMaintenanceInput)), true
	case "Mutation.updateEquipment":
		if e.complexity.Mutation.UpdateEquipment == nil {
			break
		}

		args, err := ec.field_Mutation_updateEquipment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEquipment(childComplexity, args["id"].(string), args["input"].(models.UpdateEquipmentInput)), true
	case "Mutation.updateEquipmentStatus":
		if e.complexity.Mutation.UpdateEquipmentStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateEquipmentStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEquipmentStatus(childComplexity, args["id"].(string), args["status"].(models.EquipmentStatus), args["notes"].(*string)), true
	case "Mutation.updateFacility":
		if e.complexity.Mutation.UpdateFacility == nil {
			break
		}

		args, err := ec.field_Mutation_updateFacility_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFacility(childComplexity, args["id"].(string), args["input"].(models.UpdateFacilityInput)), true
	case "Mutation.updateMaintenanceRecord":
		if e.complexity.Mutation.UpdateMaintenanceRecord == nil {
			break
		}

		args, err := ec.field_Mutation_updateMaintenanceRecord_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMaintenanceRecord(childComplexity, args["id"].(string), args["input"].(models.UpdateMaintenanceRecordInput)), true

	case "OperationalMetric.equipment":
		if e.complexity.OperationalMetric.Equipment == nil {
			break
		}

		return e.complexity.OperationalMetric.Equipment(childComplexity), true
	case "OperationalMetric.id":
		if e.complexity.OperationalMetric.ID == nil {
			break
		}

		return e.complexity.OperationalMetric.ID(childComplexity), true
	case "OperationalMetric.meetsTarget":
		if e.complexity.OperationalMetric.MeetsTarget == nil {
			break
		}

		return e.complexity.OperationalMetric.MeetsTarget(childComplexity), true
	case "OperationalMetric.metricType":
		if e.complexity.OperationalMetric.MetricType == nil {
			break
		}

		return e.complexity.OperationalMetric.MetricType(childComplexity), true
	case "OperationalMetric.notes":
		if e.complexity.OperationalMetric.Notes == nil {
			break
		}

		return e.complexity.OperationalMetric.Notes(childComplexity), true
	case "OperationalMetric.recordedAt":
		if e.complexity.OperationalMetric.RecordedAt == nil {
			break
		}

		return e.complexity.OperationalMetric.RecordedAt(childComplexity), true
	case "OperationalMetric.targetValue":
		if e.complexity.OperationalMetric.TargetValue == nil {
			break
		}

		return e.complexity.OperationalMetric.TargetValue(childComplexity), true
	case "OperationalMetric.unit":
		if e.complexity.OperationalMetric.Unit == nil {
			break
		}

		return e.complexity.OperationalMetric.Unit(childComplexity), true
	case "OperationalMetric.value":
		if e.complexity.OperationalMetric.Value == nil {
			break
		}

		return e.complexity.OperationalMetric.Value(childComplexity), true

	case "PerformanceAlert.acknowledged":
		if e.complexity.PerformanceAlert.Acknowledged == nil {
			break
		}

		return e.complexity.PerformanceAlert.Acknowledged(childComplexity), true
	case "PerformanceAlert.acknowledgedAt":
		if e.complexity.PerformanceAlert.AcknowledgedAt == nil {
			break
		}

		return e.complexity.PerformanceAlert.AcknowledgedAt(childComplexity), true
	case "PerformanceAlert.acknowledgedBy":
		if e.complexity.PerformanceAlert.AcknowledgedBy == nil {
			break
		}

		return e.complexity.PerformanceAlert.AcknowledgedBy(childComplexity), true
	case "PerformanceAlert.currentValue":
		if e.complexity.PerformanceAlert.CurrentValue == nil {
			break
		}

		return e.complexity.PerformanceAlert.CurrentValue(childComplexity), true
	case "PerformanceAlert.description":
		if e.complexity.PerformanceAlert.Description == nil {
			break
		}

		return e.complexity.PerformanceAlert.Description(childComplexity), true
	case "PerformanceAlert.equipment":
		if e.complexity.PerformanceAlert.Equipment == nil {
			break
		}

		return e.complexity.PerformanceAlert.Equipment(childComplexity), true
	case "PerformanceAlert.expectedValue":
		if e.complexity.PerformanceAlert.ExpectedValue == nil {
			break
		}

		return e.complexity.PerformanceAlert.ExpectedValue(childComplexity), true
	case "PerformanceAlert.generatedAt":
		if e.complexity.PerformanceAlert.GeneratedAt == nil {
			break
		}

		return e.complexity.PerformanceAlert.GeneratedAt(childComplexity), true
	case "PerformanceAlert.id":
		if e.complexity.PerformanceAlert.ID == nil {
			break
		}

		return e.complexity.PerformanceAlert.ID(childComplexity), true
	case "PerformanceAlert.metricType":
		if e.complexity.PerformanceAlert.MetricType == nil {
			break
		}

		return e.complexity.PerformanceAlert.MetricType(childComplexity), true
	case "PerformanceAlert.severity":
		if e.complexity.PerformanceAlert.Severity == nil {
			break
		}

		return e.complexity.PerformanceAlert.Severity(childComplexity), true
	case "PerformanceAlert.threshold":
		if e.complexity.PerformanceAlert.Threshold == nil {
			break
		}

		return e.complexity.PerformanceAlert.Threshold(childComplexity), true

	case "Query.equipment":
		if e.complexity.Query.Equipment == nil {
			break
		}

		return e.complexity.Query.Equipment(childComplexity), true
	case "Query.equipmentById":
		if e.complexity.Query.EquipmentByID == nil {
			break
		}

		args, err := ec.field_Query_equipmentById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EquipmentByID(childComplexity, args["id"].(string)), true
	case "Query.equipmentNotifications":
		if e.complexity.Query.EquipmentNotifications == nil {
			break
		}

		return e.complexity.Query.EquipmentNotifications(childComplexity), true
	case "Query.facilities":
		if e.complexity.Query.Facilities == nil {
			break
		}

		return e.complexity.Query.Facilities(childComplexity), true
	case "Query.facilityById":
		if e.complexity.Query.FacilityByID == nil {
			break
		}

		args, err := ec.field_Query_facilityById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FacilityByID(childComplexity, args["id"].(string)), true
	case "Query.facilityStatus":
		if e.complexity.Query.FacilityStatus == nil {
			break
		}

		args, err := ec.field_Query_facilityStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FacilityStatus(childComplexity, args["facilityId"].(string)), true
	case "Query.maintenanceRecords":
		if e.complexity.Query.MaintenanceRecords == nil {
			break
		}

		return e.complexity.Query.MaintenanceRecords(childComplexity), true
	case "Query.maintenanceRecordsByEquipment":
		if e.complexity.Query.MaintenanceRecordsByEquipment == nil {
			break
		}

		args, err := ec.field_Query_maintenanceRecordsByEquipment_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MaintenanceRecordsByEquipment(childComplexity, args["equipmentId"].(string)), true
	case "Query.operationalMetrics":
		if e.complexity.Query.OperationalMetrics == nil {
			break
		}

		return e.complexity.Query.OperationalMetrics(childComplexity), true
	case "Query.personnel":
		if e.complexity.Query.Personnel == nil {
			break
		}

		return e.complexity.Query.Personnel(childComplexity), true

	case "StatusUpdate.changedAt":
		if e.complexity.StatusUpdate.ChangedAt == nil {
			break
		}

		return e.complexity.StatusUpdate.ChangedAt(childComplexity), true
	case "StatusUpdate.changedBy":
		if e.complexity.StatusUpdate.ChangedBy == nil {
			break
		}

		return e.complexity.StatusUpdate.ChangedBy(childComplexity), true
	case "StatusUpdate.description":
		if e.complexity.StatusUpdate.Description == nil {
			break
		}

		return e.complexity.StatusUpdate.Description(childComplexity), true
	case "StatusUpdate.equipment":
		if e.complexity.StatusUpdate.Equipment == nil {
			break
		}

		return e.complexity.StatusUpdate.Equipment(childComplexity), true
	case "StatusUpdate.id":
		if e.complexity.StatusUpdate.ID == nil {
			break
		}

		return e.complexity.StatusUpdate.ID(childComplexity), true
	case "StatusUpdate.newStatus":
		if e.complexity.StatusUpdate.NewStatus == nil {
			break
		}

		return e.complexity.StatusUpdate.NewStatus(childComplexity), true
	case "StatusUpdate.notes":
		if e.complexity.StatusUpdate.Notes == nil {
			break
		}

		return e.complexity.StatusUpdate.Notes(childComplexity), true
	case "StatusUpdate.previousStatus":
		if e.complexity.StatusUpdate.PreviousStatus == nil {
			break
		}

		return e.complexity.StatusUpdate.PreviousStatus(childComplexity), true

	case "TemperatureRange.max":
		if e.complexity.TemperatureRange.Max == nil {
			break
		}

		return e.complexity.TemperatureRange.Max(childComplexity), true
	case "TemperatureRange.min":
		if e.complexity.TemperatureRange.Min == nil {
			break
		}

		return e.complexity.TemperatureRange.Min(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddAssociateInput,
		ec.unmarshalInputAddManagerInput,
		ec.unmarshalInputAddOrgChainInput,
		ec.unmarshalInputCompleteMaintenanceInput,
		ec.unmarshalInputContactInfoInput,
		ec.unmarshalInputCreateEquipmentInput,
		ec.unmarshalInputCreateFacilityInput,
		ec.unmarshalInputDimensionsInput,
		ec.unmarshalInputElectricalSpecsInput,
		ec.unmarshalInputEquipmentSpecificationsInput,
		ec.unmarshalInputLocationInput,
		ec.unmarshalInputRecordOperationalMetricInput,
		ec.unmarshalInputScheduleMaintenanceInput,
		ec.unmarshalInputTemperatureRangeInput,
		ec.unmarshalInputUpdateEquipmentInput,
		ec.unmarshalInputUpdateFacilityInput,
		ec.unmarshalInputUpdateMaintenanceRecordInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphql", Input: `# Industrial Machinery Management System
# This GraphQL API provides comprehensive management capabilities for industrial machinery,
# including equipment monitoring, maintenance scheduling, performance analytics, and operational control.

"""
Root query type for retrieving industrial machinery data.
Provides access to equipment, facilities, maintenance records, and operational metrics.
"""
type Query {
  """
  Retrieve all industrial equipment in the system.
  Returns a list of all registered machinery with their current status and specifications.
  """
  equipment: [Equipment!]!
  
  """
  Get a specific piece of equipment by its unique identifier.
  Returns detailed information about the equipment including specifications, status, and maintenance history.
  """
  equipmentById(id: ID!): Equipment
  
  """
  Retrieve all manufacturing facilities in the system.
  Returns a list of facilities with their locations, capacities, and operational status.
  """
  facilities: [Facility!]!
  
  """
  Get a specific facility by its unique identifier.
  Returns detailed information about the facility including equipment inventory and operational metrics.
  """
  facilityById(id: ID!): Facility
  
  """
  Retrieve all maintenance records in the system.
  Returns a comprehensive list of maintenance activities, both scheduled and completed.
  """
  maintenanceRecords: [MaintenanceRecord!]!
  
  """
  Get maintenance records for a specific piece of equipment.
  Returns the complete maintenance history for the specified equipment.
  """
  maintenanceRecordsByEquipment(equipmentId: ID!): [MaintenanceRecord!]!
  
  """
  Retrieve all operational metrics and performance data.
  Returns key performance indicators, efficiency metrics, and operational statistics.
  """
  operationalMetrics: [OperationalMetric!]!
  
  """
  Get real-time status of all equipment in a specific facility.
  Returns current operational status, alerts, and performance indicators.
  """
  facilityStatus(facilityId: ID!): FacilityStatus
  
  """
  Retrieve all personnel across all facilities.
  Returns a comprehensive list of all personnel (managers and associates) in the system.
  """
  personnel: [Personnel!]!
  
  """
  Retrieve all equipment notifications across the system.
  Returns a collection of different types of notifications including alerts, maintenance reminders, and status updates.
  """
  equipmentNotifications: [EquipmentNotification!]!
}

"""
Root mutation type for modifying industrial machinery data.
Provides capabilities to add, update, and manage equipment, facilities, and maintenance operations.
"""
type Mutation {
  """
  Register a new piece of industrial equipment in the system.
  Creates a new equipment record with specifications, location, and initial status.
  """
  createEquipment(input: CreateEquipmentInput!): Equipment!
  
  """
  Update existing equipment information.
  Modifies equipment specifications, status, or location information.
  """
  updateEquipment(id: ID!, input: UpdateEquipmentInput!): Equipment!
  
  """
  Remove equipment from the system.
  Deactivates the equipment record and removes it from active operations.
  """
  deleteEquipment(id: ID!): Boolean!
  
  """
  Create a new manufacturing facility.
  Establishes a new facility with location, capacity, and operational parameters.
  """
  createFacility(input: CreateFacilityInput!): Facility!
  
  """
  Update facility information.
  Modifies facility details, capacity, or operational parameters.
  """
  updateFacility(id: ID!, input: UpdateFacilityInput!): Facility!
  
  """
  Remove a facility from the system.
  Deactivates the facility and removes it from operational management.
  """
  deleteFacility(id: ID!): Boolean!
  
  """
  Schedule a new maintenance activity.
  Creates a maintenance record with scheduled date, type, and assigned personnel.
  """
  scheduleMaintenance(input: ScheduleMaintenanceInput!): MaintenanceRecord!
  
  """
  Update maintenance record status.
  Modifies maintenance status, completion details, or reschedules the activity.
  """
  updateMaintenanceRecord(id: ID!, input: UpdateMaintenanceRecordInput!): MaintenanceRecord!
  
  """
  Complete a maintenance activity.
  Marks a maintenance record as completed with completion details and notes.
  """
  completeMaintenance(id: ID!, input: CompleteMaintenanceInput!): MaintenanceRecord!
  
  """
  Record operational metrics.
  Logs performance data, efficiency measurements, and operational statistics.
  """
  recordOperationalMetric(input: RecordOperationalMetricInput!): OperationalMetric!
  
  """
  Update equipment operational status.
  Changes equipment status (running, stopped, maintenance, error) with optional notes.
  """
  updateEquipmentStatus(id: ID!, status: EquipmentStatus!, notes: String): Equipment!
  
  """
  Add a manager to a facility.
  Creates a new manager and assigns them to the specified facility.
  """
  addManagerToFacility(facilityId: ID!, input: AddManagerInput!): Manager!
  
  """
  Add an associate to a facility.
  Creates a new associate and assigns them to the specified facility.
  """
  addAssociateToFacility(facilityId: ID!, input: AddAssociateInput!): Associate!
  
  """
  Remove personnel from a facility.
  Removes the specified personnel from the facility.
  """
  removePersonnelFromFacility(facilityId: ID!, personnelId: ID!): Boolean!


  """
  Add an organization chain to a facility.
  Creates a new organization chain and assigns it to the specified facility.
  """
  addOrgChainToFacility(facilityId: ID!, input: AddOrgChainInput!): [Personnel!]!
}

"""
Represents a piece of industrial equipment in the manufacturing system.
Contains comprehensive information about machinery specifications, status, and operational data.
"""
type Equipment {
  """Unique identifier for the equipment"""
  id: ID!
  
  """Human-readable name of the equipment"""
  name: String!
  
  """Detailed description of the equipment and its purpose"""
  description: String!
  
  """Manufacturer of the equipment"""
  manufacturer: String!
  
  """Model number or designation of the equipment"""
  model: String!
  
  """Serial number for unique identification"""
  serialNumber: String!
  
  """Type or category of equipment (e.g., CNC_MILL, CONVEYOR_BELT, ROBOTIC_ARM)"""
  type: EquipmentType!
  
  """Current operational status of the equipment"""
  status: EquipmentStatus!
  
  """Facility where the equipment is located"""
  facility: Facility!
  
  """Specifications and technical parameters of the equipment"""
  specifications: EquipmentSpecifications!
  
  """Installation date of the equipment"""
  installedAt: String!
  
  """Last maintenance date"""
  lastMaintenanceAt: String
  
  """Next scheduled maintenance date"""
  nextMaintenanceAt: String
  
  """Current operational efficiency percentage (0-100)"""
  efficiency: Float!
  
  """Total operating hours since installation"""
  totalOperatingHours: Int!
  
  """Maintenance records for this equipment"""
  maintenanceRecords: [MaintenanceRecord!]!
  
  """Current alerts or issues with the equipment"""
  alerts: [EquipmentAlert!]!
}

"""
Represents a manufacturing facility containing industrial equipment.
Manages facility-level operations, capacity, and equipment inventory.
"""
type Facility {
  """Unique identifier for the facility"""
  id: ID!
  
  """Name of the manufacturing facility"""
  name: String!
  
  """Physical address of the facility"""
  address: String!
  
  """Geographic location coordinates"""
  location: Location!
  
  """Total production capacity of the facility"""
  capacity: Int!
  
  """Current utilization percentage (0-100)"""
  utilization: Float!
  
  """Operational status of the facility"""
  status: FacilityOperationalStatus!
  
  """Date when the facility became operational"""
  operationalSince: String!
  
  """Equipment inventory in this facility"""
  equipment: [Equipment!]!
  
  """Facility manager responsible for operations"""
  manager: String!
  
  """Contact information for the facility"""
  contactInfo: ContactInfo!
  
  """Personnel working at this facility"""
  personnel: [Personnel!]!
}

"""
Represents personnel working at a facility.
Interface for different types of facility personnel.
"""
interface Personnel {
  """Unique identifier for the personnel"""
  id: ID!
  
  """Full name of the personnel"""
  name: String!
  
  """Email address for communication"""
  email: String!
  
  """Phone number for contact"""
  phone: String!
  
  """Date when the personnel joined the facility"""
  joinedAt: String!
  
  """Current employment status"""
  status: PersonnelStatus!
}

"""
Represents a manager at a facility.
Manages operations and oversees other personnel.
"""
type Manager implements Personnel {
  """Unique identifier for the manager"""
  id: ID!
  
  """Full name of the manager"""
  name: String!
  
  """Email address for communication"""
  email: String!
  
  """Phone number for contact"""
  phone: String!
  
  """Date when the manager joined the facility"""
  joinedAt: String!
  
  """Current employment status"""
  status: PersonnelStatus!
  
  """Department or area of responsibility"""
  department: String!
  
  """Number of direct reports"""
  directReports: Int!
  
  """Management level (1-5, where 5 is highest)"""
  level: Int!
}

"""
Represents an associate at a facility.
Performs operational tasks and reports to managers.
"""
type Associate implements Personnel {
  """Unique identifier for the associate"""
  id: ID!
  
  """Full name of the associate"""
  name: String!
  
  """Email address for communication"""
  email: String!
  
  """Phone number for contact"""
  phone: String!
  
  """Date when the associate joined the facility"""
  joinedAt: String!
  
  """Current employment status"""
  status: PersonnelStatus!
  
  """Job title or role"""
  jobTitle: String!
  
  """Department or work area"""
  department: String!
  
  """Manager this associate reports to"""
  reportsTo: Manager
}

"""
Represents a maintenance record for industrial equipment.
Tracks maintenance activities, schedules, and completion status.
"""
type MaintenanceRecord {
  """Unique identifier for the maintenance record"""
  id: ID!
  
  """Equipment being maintained"""
  equipment: Equipment!
  
  """Type of maintenance activity"""
  type: MaintenanceType!
  
  """Priority level of the maintenance"""
  priority: MaintenancePriority!
  
  """Scheduled date for the maintenance"""
  scheduledDate: String!
  
  """Actual completion date (null if not completed)"""
  completedDate: String
  
  """Status of the maintenance activity"""
  status: MaintenanceStatus!
  
  """Description of the maintenance work to be performed"""
  description: String!
  
  """Technician assigned to perform the maintenance"""
  assignedTechnician: String!
  
  """Estimated duration in hours"""
  estimatedDuration: Int!
  
  """Actual duration in hours (null if not completed)"""
  actualDuration: Int
  
  """Parts or materials required for the maintenance"""
  requiredParts: [String!]!
  
  """Cost of the maintenance activity"""
  cost: Float
  
  """Notes or observations from the maintenance"""
  notes: String
}

"""
Represents operational metrics and performance data.
Tracks key performance indicators and efficiency measurements.
"""
type OperationalMetric {
  """Unique identifier for the metric record"""
  id: ID!
  
  """Equipment this metric relates to"""
  equipment: Equipment!
  
  """Type of metric being measured"""
  metricType: MetricType!
  
  """Value of the metric"""
  value: Float!
  
  """Unit of measurement for the metric"""
  unit: String!
  
  """Date and time when the metric was recorded"""
  recordedAt: String!
  
  """Target or expected value for this metric"""
  targetValue: Float
  
  """Whether the metric meets the target threshold"""
  meetsTarget: Boolean!
  
  """Additional context or notes about the metric"""
  notes: String
}

"""
Represents the current status of a manufacturing facility.
Provides real-time operational information and alerts.
"""
type FacilityStatus {
  """Facility this status relates to"""
  facility: Facility!
  
  """Current operational status"""
  status: FacilityOperationalStatus!
  
  """Number of equipment units currently running"""
  equipmentRunning: Int!
  
  """Number of equipment units currently stopped"""
  equipmentStopped: Int!
  
  """Number of equipment units in maintenance"""
  equipmentInMaintenance: Int!
  
  """Number of active alerts in the facility"""
  activeAlerts: Int!
  
  """Current production rate (units per hour)"""
  productionRate: Float!
  
  """Overall facility efficiency percentage"""
  efficiency: Float!
  
  """Last updated timestamp"""
  lastUpdated: String!
}

"""
Represents equipment specifications and technical parameters.
Contains detailed technical information about machinery capabilities.
"""
type EquipmentSpecifications {
  """Power consumption in kilowatts"""
  powerConsumption: Float!
  
  """Maximum operating speed or capacity"""
  maxSpeed: Float!
  
  """Operating temperature range in Celsius"""
  operatingTemperature: TemperatureRange!
  
  """Weight of the equipment in kilograms"""
  weight: Float!
  
  """Dimensions of the equipment (length x width x height)"""
  dimensions: Dimensions!
  
  """Required voltage and electrical specifications"""
  electricalSpecs: ElectricalSpecs!
  
  """Environmental requirements (humidity, dust, etc.)"""
  environmentalRequirements: [String!]!
  
  """Safety certifications and compliance standards"""
  certifications: [String!]!
}

"""
Represents an alert or issue with equipment.
Tracks equipment problems, warnings, and maintenance needs.
"""
type EquipmentAlert {
  """Unique identifier for the alert"""
  id: ID!
  
  """Equipment this alert relates to"""
  equipment: Equipment!
  
  """Type of alert or issue"""
  type: AlertType!
  
  """Severity level of the alert"""
  severity: AlertSeverity!
  
  """Description of the alert or issue"""
  description: String!
  
  """Date and time when the alert was generated"""
  generatedAt: String!
  
  """Whether the alert has been acknowledged"""
  acknowledged: Boolean!
  
  """Date when the alert was acknowledged"""
  acknowledgedAt: String
  
  """Person who acknowledged the alert"""
  acknowledgedBy: String
  
  """Resolution status of the alert"""
  resolved: Boolean!
  
  """Date when the alert was resolved"""
  resolvedAt: String
}

"""
Represents geographic location coordinates.
Used for facility and equipment location tracking.
"""
type Location {
  """Latitude coordinate"""
  latitude: Float!
  
  """Longitude coordinate"""
  longitude: Float!
  
  """Altitude above sea level in meters"""
  altitude: Float
}

"""
Represents contact information for facilities.
Contains communication details for facility management.
"""
type ContactInfo {
  """Primary contact phone number"""
  phone: String!
  
  """Email address for facility communications"""
  email: String!
  
  """Emergency contact phone number"""
  emergencyPhone: String
  
  """Facility manager contact information"""
  managerContact: String
}

"""
Represents temperature range specifications.
Defines minimum and maximum operating temperatures.
"""
type TemperatureRange {
  """Minimum operating temperature in Celsius"""
  min: Float!
  
  """Maximum operating temperature in Celsius"""
  max: Float!
}

"""
Represents equipment dimensions.
Contains length, width, and height measurements.
"""
type Dimensions {
  """Length in meters"""
  length: Float!
  
  """Width in meters"""
  width: Float!
  
  """Height in meters"""
  height: Float!
}

"""
Represents electrical specifications for equipment.
Contains voltage, current, and power requirements.
"""
type ElectricalSpecs {
  """Operating voltage in volts"""
  voltage: Float!
  
  """Operating current in amperes"""
  current: Float!
  
  """Power factor"""
  powerFactor: Float!
  
  """Frequency in hertz"""
  frequency: Float!
}

# Union Types

"""
Union type representing different types of equipment notifications.
Showcases various notification types that can be sent to operators and managers.
"""
union EquipmentNotification = EquipmentAlert | MaintenanceReminder | StatusUpdate | PerformanceAlert

"""
Represents a maintenance reminder notification.
Sent to remind personnel about upcoming or overdue maintenance activities.
"""
type MaintenanceReminder {
  """Unique identifier for the reminder"""
  id: ID!
  
  """Equipment this reminder relates to"""
  equipment: Equipment!
  
  """Type of maintenance reminder"""
  type: MaintenanceReminderType!
  
  """Priority level of the reminder"""
  priority: MaintenancePriority!
  
  """Description of the maintenance reminder"""
  description: String!
  
  """Date when the reminder was created"""
  createdAt: String!
  
  """Scheduled maintenance date"""
  scheduledDate: String!
  
  """Whether the reminder has been acknowledged"""
  acknowledged: Boolean!
  
  """Date when the reminder was acknowledged"""
  acknowledgedAt: String
  
  """Person who acknowledged the reminder"""
  acknowledgedBy: String
}

"""
Represents a status update notification.
Sent when equipment status changes or important operational updates occur.
"""
type StatusUpdate {
  """Unique identifier for the status update"""
  id: ID!
  
  """Equipment this update relates to"""
  equipment: Equipment!
  
  """Previous status of the equipment"""
  previousStatus: EquipmentStatus!
  
  """New status of the equipment"""
  newStatus: EquipmentStatus!
  
  """Description of the status change"""
  description: String!
  
  """Date and time when the status changed"""
  changedAt: String!
  
  """Person who initiated the status change"""
  changedBy: String
  
  """Additional notes about the status change"""
  notes: String
}

"""
Represents a performance alert notification.
Sent when equipment performance metrics exceed or fall below expected thresholds.
"""
type PerformanceAlert {
  """Unique identifier for the performance alert"""
  id: ID!
  
  """Equipment this alert relates to"""
  equipment: Equipment!
  
  """Type of performance metric that triggered the alert"""
  metricType: MetricType!
  
  """Current value of the metric"""
  currentValue: Float!
  
  """Expected or target value for the metric"""
  expectedValue: Float!
  
  """Threshold that was exceeded"""
  threshold: Float!
  
  """Severity level of the performance alert"""
  severity: AlertSeverity!
  
  """Description of the performance issue"""
  description: String!
  
  """Date and time when the alert was generated"""
  generatedAt: String!
  
  """Whether the alert has been acknowledged"""
  acknowledged: Boolean!
  
  """Date when the alert was acknowledged"""
  acknowledgedAt: String
  
  """Person who acknowledged the alert"""
  acknowledgedBy: String
}

# Enums

"""
Types of industrial equipment in the manufacturing system.
Categorizes equipment by function and operational characteristics.
"""
enum EquipmentType {
  """Computer Numerical Control milling machine"""
  CNC_MILL
  
  """Computer Numerical Control lathe"""
  CNC_LATHE
  
  """Conveyor belt system"""
  CONVEYOR_BELT
  
  """Robotic arm or manipulator"""
  ROBOTIC_ARM
  
  """Industrial robot for assembly"""
  ASSEMBLY_ROBOT
  
  """Welding machine or system"""
  WELDING_MACHINE
  
  """Press or stamping machine"""
  PRESS_MACHINE
  
  """Quality control inspection equipment"""
  INSPECTION_EQUIPMENT
  
  """Packaging machine"""
  PACKAGING_MACHINE
  
  """Material handling equipment"""
  MATERIAL_HANDLER
  
  """Cutting or machining center"""
  MACHINING_CENTER
  
  """Grinding machine"""
  GRINDING_MACHINE
  
  """Drilling machine"""
  DRILLING_MACHINE
  
  """Other specialized equipment"""
  OTHER
}

"""
Operational status of industrial equipment.
Indicates the current state of equipment operation.
"""
enum EquipmentStatus {
  """Equipment is currently running and operational"""
  RUNNING
  
  """Equipment is stopped but ready for operation"""
  STOPPED
  
  """Equipment is in maintenance mode"""
  MAINTENANCE
  
  """Equipment has an error or fault condition"""
  ERROR
  
  """Equipment is offline or disconnected"""
  OFFLINE
  
  """Equipment is in standby mode"""
  STANDBY
  
  """Equipment is being set up or configured"""
  SETUP
}

"""
Operational status of manufacturing facilities.
Indicates the current operational state of a facility.
"""
enum FacilityOperationalStatus {
  """Facility is fully operational"""
  OPERATIONAL
  
  """Facility is partially operational"""
  PARTIAL
  
  """Facility is under maintenance"""
  MAINTENANCE
  
  """Facility is temporarily closed"""
  CLOSED
  
  """Facility is in emergency shutdown"""
  EMERGENCY
}

"""
Types of maintenance activities for industrial equipment.
Categorizes different types of maintenance work.
"""
enum MaintenanceType {
  """Preventive maintenance to prevent failures"""
  PREVENTIVE
  
  """Corrective maintenance to fix issues"""
  CORRECTIVE
  
  """Predictive maintenance based on condition monitoring"""
  PREDICTIVE
  
  """Emergency maintenance for urgent repairs"""
  EMERGENCY
  
  """Routine inspection and testing"""
  INSPECTION
  
  """Calibration of equipment parameters"""
  CALIBRATION
  
  """Cleaning and general upkeep"""
  CLEANING
  
  """Replacement of worn or damaged parts"""
  REPLACEMENT
}

"""
Priority levels for maintenance activities.
Indicates the urgency and importance of maintenance work.
"""
enum MaintenancePriority {
  """Critical priority requiring immediate attention"""
  CRITICAL
  
  """High priority requiring prompt attention"""
  HIGH
  
  """Medium priority for normal scheduling"""
  MEDIUM
  
  """Low priority for routine maintenance"""
  LOW
}

"""
Status of maintenance activities.
Tracks the progress and completion of maintenance work.
"""
enum MaintenanceStatus {
  """Maintenance is scheduled but not started"""
  SCHEDULED
  
  """Maintenance is currently in progress"""
  IN_PROGRESS
  
  """Maintenance has been completed"""
  COMPLETED
  
  """Maintenance has been cancelled"""
  CANCELLED
  
  """Maintenance is overdue"""
  OVERDUE
  
  """Maintenance is on hold"""
  ON_HOLD
}

"""
Types of operational metrics and performance indicators.
Categorizes different types of performance measurements.
"""
enum MetricType {
  """Production output rate"""
  PRODUCTION_RATE
  
  """Equipment efficiency percentage"""
  EFFICIENCY
  
  """Energy consumption rate"""
  ENERGY_CONSUMPTION
  
  """Quality defect rate"""
  QUALITY_RATE
  
  """Equipment uptime percentage"""
  UPTIME
  
  """Cycle time for operations"""
  CYCLE_TIME
  
  """Throughput capacity"""
  THROUGHPUT
  
  """Temperature measurements"""
  TEMPERATURE
  
  """Vibration levels"""
  VIBRATION
  
  """Pressure readings"""
  PRESSURE
}

"""
Types of equipment alerts and issues.
Categorizes different types of equipment problems and warnings.
"""
enum AlertType {
  """Temperature exceeds normal operating range"""
  TEMPERATURE_HIGH
  
  """Temperature below normal operating range"""
  TEMPERATURE_LOW
  
  """Vibration levels exceed threshold"""
  VIBRATION_HIGH
  
  """Pressure readings outside normal range"""
  PRESSURE_ABNORMAL
  
  """Power consumption exceeds expected levels"""
  POWER_HIGH
  
  """Equipment stopped unexpectedly"""
  UNEXPECTED_STOP
  
  """Maintenance due or overdue"""
  MAINTENANCE_DUE
  
  """Safety system activation"""
  SAFETY_ACTIVATION
  
  """Communication error with equipment"""
  COMMUNICATION_ERROR
  
  """Sensor malfunction or failure"""
  SENSOR_FAILURE
  
  """General equipment fault"""
  EQUIPMENT_FAULT
}

"""
Severity levels for equipment alerts.
Indicates the urgency and impact of equipment issues.
"""
enum AlertSeverity {
  """Critical severity requiring immediate action"""
  CRITICAL
  
  """High severity requiring prompt attention"""
  HIGH
  
  """Medium severity for normal attention"""
  MEDIUM
  
  """Low severity for routine monitoring"""
  LOW
  
  """Informational alert for awareness"""
  INFO
}

"""
Employment status of facility personnel.
Indicates the current employment state of personnel.
"""
enum PersonnelStatus {
  """Personnel is actively employed"""
  ACTIVE
  
  """Personnel is on leave"""
  ON_LEAVE
  
  """Personnel is temporarily suspended"""
  SUSPENDED
  
  """Personnel has resigned"""
  RESIGNED
  
  """Personnel has been terminated"""
  TERMINATED
}

"""
Types of maintenance reminder notifications.
Categorizes different types of maintenance reminders.
"""
enum MaintenanceReminderType {
  """Reminder for upcoming scheduled maintenance"""
  UPCOMING_MAINTENANCE
  
  """Reminder for overdue maintenance"""
  OVERDUE_MAINTENANCE
  
  """Reminder for routine inspection"""
  INSPECTION_DUE
  
  """Reminder for calibration due"""
  CALIBRATION_DUE
  
  """Reminder for parts replacement"""
  PARTS_REPLACEMENT_DUE
  
  """Reminder for safety check"""
  SAFETY_CHECK_DUE
}

# Input Types

"""
Input for creating new industrial equipment.
Contains all necessary information to register equipment in the system.
"""
input CreateEquipmentInput {
  """Name of the equipment"""
  name: String!
  
  """Description of the equipment"""
  description: String!
  
  """Manufacturer of the equipment"""
  manufacturer: String!
  
  """Model number or designation"""
  model: String!
  
  """Serial number for identification"""
  serialNumber: String!
  
  """Type of equipment"""
  type: EquipmentType!
  
  """ID of the facility where equipment is located"""
  facilityId: ID!
  
  """Equipment specifications"""
  specifications: EquipmentSpecificationsInput!
  
  """Installation date (ISO 8601 format)"""
  installedAt: String!
}

"""
Input for updating existing equipment.
Allows modification of equipment information and specifications.
"""
input UpdateEquipmentInput {
  """Updated name of the equipment"""
  name: String
  
  """Updated description"""
  description: String
  
  """Updated manufacturer information"""
  manufacturer: String
  
  """Updated model information"""
  model: String
  
  """Updated serial number"""
  serialNumber: String
  
  """Updated equipment type"""
  type: EquipmentType
  
  """Updated facility ID"""
  facilityId: ID
  
  """Updated specifications"""
  specifications: EquipmentSpecificationsInput
  
  """Updated installation date"""
  installedAt: String
}

"""
Input for creating new manufacturing facilities.
Contains information needed to establish a new facility.
"""
input CreateFacilityInput {
  """Name of the facility"""
  name: String!
  
  """Physical address"""
  address: String!
  
  """Geographic location"""
  location: LocationInput!
  
  """Production capacity"""
  capacity: Int!
  
  """Operational start date (ISO 8601 format)"""
  operationalSince: String!
  
  """Facility manager name"""
  manager: String!
  
  """Contact information"""
  contactInfo: ContactInfoInput!
}

"""
Input for updating facility information.
Allows modification of facility details and parameters.
"""
input UpdateFacilityInput {
  """Updated facility name"""
  name: String
  
  """Updated address"""
  address: String
  
  """Updated location"""
  location: LocationInput
  
  """Updated capacity"""
  capacity: Int
  
  """Updated operational date"""
  operationalSince: String
  
  """Updated manager"""
  manager: String
  
  """Updated contact information"""
  contactInfo: ContactInfoInput
}

"""
Input for scheduling maintenance activities.
Contains information needed to create a maintenance record.
"""
input ScheduleMaintenanceInput {
  """ID of equipment to be maintained"""
  equipmentId: ID!
  
  """Type of maintenance"""
  type: MaintenanceType!
  
  """Priority level"""
  priority: MaintenancePriority!
  
  """Scheduled date (ISO 8601 format)"""
  scheduledDate: String!
  
  """Description of maintenance work"""
  description: String!
  
  """Assigned technician"""
  assignedTechnician: String!
  
  """Estimated duration in hours"""
  estimatedDuration: Int!
  
  """Required parts or materials"""
  requiredParts: [String!]
}

"""
Input for updating maintenance records.
Allows modification of maintenance details and status.
"""
input UpdateMaintenanceRecordInput {
  """Updated maintenance type"""
  type: MaintenanceType
  
  """Updated priority"""
  priority: MaintenancePriority
  
  """Updated scheduled date"""
  scheduledDate: String
  
  """Updated description"""
  description: String
  
  """Updated assigned technician"""
  assignedTechnician: String
  
  """Updated estimated duration"""
  estimatedDuration: Int
  
  """Updated required parts"""
  requiredParts: [String!]
  
  """Updated status"""
  status: MaintenanceStatus
}

"""
Input for completing maintenance activities.
Contains information needed to mark maintenance as completed.
"""
input CompleteMaintenanceInput {
  """Actual completion date (ISO 8601 format)"""
  completedDate: String!
  
  """Actual duration in hours"""
  actualDuration: Int!
  
  """Actual cost of maintenance"""
  cost: Float
  
  """Completion notes and observations"""
  notes: String
}

"""
Input for recording operational metrics.
Contains performance data and measurements.
"""
input RecordOperationalMetricInput {
  """ID of equipment this metric relates to"""
  equipmentId: ID!
  
  """Type of metric being recorded"""
  metricType: MetricType!
  
  """Value of the metric"""
  value: Float!
  
  """Unit of measurement"""
  unit: String!
  
  """Target or expected value"""
  targetValue: Float
  
  """Additional notes or context"""
  notes: String
}

"""
Input for equipment specifications.
Contains technical parameters and capabilities.
"""
input EquipmentSpecificationsInput {
  """Power consumption in kilowatts"""
  powerConsumption: Float!
  
  """Maximum operating speed or capacity"""
  maxSpeed: Float!
  
  """Operating temperature range"""
  operatingTemperature: TemperatureRangeInput!
  
  """Weight in kilograms"""
  weight: Float!
  
  """Equipment dimensions"""
  dimensions: DimensionsInput!
  
  """Electrical specifications"""
  electricalSpecs: ElectricalSpecsInput!
  
  """Environmental requirements"""
  environmentalRequirements: [String!]!
  
  """Safety certifications"""
  certifications: [String!]!
}

"""
Input for geographic location.
Contains latitude, longitude, and optional altitude.
"""
input LocationInput {
  """Latitude coordinate"""
  latitude: Float!
  
  """Longitude coordinate"""
  longitude: Float!
  
  """Altitude above sea level in meters"""
  altitude: Float
}

"""
Input for contact information.
Contains communication details for facilities.
"""
input ContactInfoInput {
  """Primary contact phone number"""
  phone: String!
  
  """Email address"""
  email: String!
  
  """Emergency contact phone number"""
  emergencyPhone: String
  
  """Facility manager contact"""
  managerContact: String
}

"""
Input for temperature range.
Defines minimum and maximum operating temperatures.
"""
input TemperatureRangeInput {
  """Minimum temperature in Celsius"""
  min: Float!
  
  """Maximum temperature in Celsius"""
  max: Float!
}

"""
Input for equipment dimensions.
Contains length, width, and height measurements.
"""
input DimensionsInput {
  """Length in meters"""
  length: Float!
  
  """Width in meters"""
  width: Float!
  
  """Height in meters"""
  height: Float!
}

"""
Input for electrical specifications.
Contains voltage, current, and power requirements.
"""
input ElectricalSpecsInput {
  """Operating voltage in volts"""
  voltage: Float!
  
  """Operating current in amperes"""
  current: Float!
  
  """Power factor"""
  powerFactor: Float!
  
  """Frequency in hertz"""
  frequency: Float!
}

"""
Input for adding a manager to a facility.
Contains information needed to create and assign a manager.
"""
input AddManagerInput {
  """Full name of the manager"""
  name: String!
  
  """Email address for communication"""
  email: String!
  
  """Phone number for contact"""
  phone: String!
  
  """Department or area of responsibility"""
  department: String!
  
  """Management level (1-5, where 5 is highest)"""
  level: Int!
  
  """Date when the manager joined (ISO 8601 format)"""
  joinedAt: String!
}

"""
Input for adding an associate to a facility.
Contains information needed to create and assign an associate.
"""
input AddAssociateInput {
  """Full name of the associate"""
  name: String!
  
  """Email address for communication"""
  email: String!
  
  """Phone number for contact"""
  phone: String!
  
  """Job title or role"""
  jobTitle: String!
  
  """Department or work area"""
  department: String!
  
  """ID of the manager this associate reports to"""
  reportsToId: ID
  
  """Date when the associate joined (ISO 8601 format)"""
  joinedAt: String!

  """ training required """
  trainingRequired: Boolean = true
}

input AddOrgChainInput {
  manager: [AddManagerInput]
  associate: [AddAssociateInput]
  nextLevel: AddOrgChainInput
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addAssociateToFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facilityId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facilityId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNAddAssociateInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addManagerToFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facilityId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facilityId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNAddManagerInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrgChainToFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facilityId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facilityId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNAddOrgChainInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddOrgChainInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_completeMaintenance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCompleteMaintenanceInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCompleteMaintenanceInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createEquipment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateEquipmentInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCreateEquipmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFacilityInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCreateFacilityInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEquipment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordOperationalMetric_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNRecordOperationalMetricInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐRecordOperationalMetricInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removePersonnelFromFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facilityId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facilityId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "personnelId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["personnelId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_scheduleMaintenance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNScheduleMaintenanceInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐScheduleMaintenanceInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEquipmentStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "notes", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["notes"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEquipment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateEquipmentInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateEquipmentInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFacility_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateFacilityInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateFacilityInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMaintenanceRecord_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateMaintenanceRecordInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateMaintenanceRecordInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_equipmentById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_facilityById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_facilityStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "facilityId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["facilityId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_maintenanceRecordsByEquipment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "equipmentId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["equipmentId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Associate_id(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_name(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_email(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_phone(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_phone,
		func(ctx context.Context) (any, error) {
			return obj.Phone, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_joinedAt(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_joinedAt,
		func(ctx context.Context) (any, error) {
			return obj.JoinedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_joinedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_status(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNPersonnelStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PersonnelStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_jobTitle(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_jobTitle,
		func(ctx context.Context) (any, error) {
			return obj.JobTitle, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_jobTitle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_department(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_department,
		func(ctx context.Context) (any, error) {
			return obj.Department, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Associate_department(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Associate_reportsTo(ctx context.Context, field graphql.CollectedField, obj *models.Associate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Associate_reportsTo,
		func(ctx context.Context) (any, error) {
			return obj.ReportsTo, nil
		},
		nil,
		ec.marshalOManager2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐManager,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Associate_reportsTo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Associate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Manager_id(ctx, field)
			case "name":
				return ec.fieldContext_Manager_name(ctx, field)
			case "email":
				return ec.fieldContext_Manager_email(ctx, field)
			case "phone":
				return ec.fieldContext_Manager_phone(ctx, field)
			case "joinedAt":
				return ec.fieldContext_Manager_joinedAt(ctx, field)
			case "status":
				return ec.fieldContext_Manager_status(ctx, field)
			case "department":
				return ec.fieldContext_Manager_department(ctx, field)
			case "directReports":
				return ec.fieldContext_Manager_directReports(ctx, field)
			case "level":
				return ec.fieldContext_Manager_level(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Manager", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactInfo_phone(ctx context.Context, field graphql.CollectedField, obj *models.ContactInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContactInfo_phone,
		func(ctx context.Context) (any, error) {
			return obj.Phone, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ContactInfo_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactInfo_email(ctx context.Context, field graphql.CollectedField, obj *models.ContactInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContactInfo_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ContactInfo_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactInfo_emergencyPhone(ctx context.Context, field graphql.CollectedField, obj *models.ContactInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContactInfo_emergencyPhone,
		func(ctx context.Context) (any, error) {
			return obj.EmergencyPhone, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ContactInfo_emergencyPhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactInfo_managerContact(ctx context.Context, field graphql.CollectedField, obj *models.ContactInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ContactInfo_managerContact,
		func(ctx context.Context) (any, error) {
			return obj.ManagerContact, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ContactInfo_managerContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dimensions_length(ctx context.Context, field graphql.CollectedField, obj *models.Dimensions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Dimensions_length,
		func(ctx context.Context) (any, error) {
			return obj.Length, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Dimensions_length(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dimensions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dimensions_width(ctx context.Context, field graphql.CollectedField, obj *models.Dimensions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Dimensions_width,
		func(ctx context.Context) (any, error) {
			return obj.Width, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Dimensions_width(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dimensions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dimensions_height(ctx context.Context, field graphql.CollectedField, obj *models.Dimensions) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Dimensions_height,
		func(ctx context.Context) (any, error) {
			return obj.Height, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Dimensions_height(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dimensions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElectricalSpecs_voltage(ctx context.Context, field graphql.CollectedField, obj *models.ElectricalSpecs) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ElectricalSpecs_voltage,
		func(ctx context.Context) (any, error) {
			return obj.Voltage, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ElectricalSpecs_voltage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElectricalSpecs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElectricalSpecs_current(ctx context.Context, field graphql.CollectedField, obj *models.ElectricalSpecs) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ElectricalSpecs_current,
		func(ctx context.Context) (any, error) {
			return obj.Current, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ElectricalSpecs_current(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElectricalSpecs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElectricalSpecs_powerFactor(ctx context.Context, field graphql.CollectedField, obj *models.ElectricalSpecs) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ElectricalSpecs_powerFactor,
		func(ctx context.Context) (any, error) {
			return obj.PowerFactor, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ElectricalSpecs_powerFactor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElectricalSpecs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElectricalSpecs_frequency(ctx context.Context, field graphql.CollectedField, obj *models.ElectricalSpecs) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ElectricalSpecs_frequency,
		func(ctx context.Context) (any, error) {
			return obj.Frequency, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ElectricalSpecs_frequency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElectricalSpecs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_id(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_name(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_description(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_manufacturer(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_manufacturer,
		func(ctx context.Context) (any, error) {
			return obj.Manufacturer, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_manufacturer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_model(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_model,
		func(ctx context.Context) (any, error) {
			return obj.Model, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_model(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_serialNumber(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_serialNumber,
		func(ctx context.Context) (any, error) {
			return obj.SerialNumber, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_serialNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_type(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNEquipmentType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EquipmentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_status(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EquipmentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_facility(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_facility,
		func(ctx context.Context) (any, error) {
			return obj.Facility, nil
		},
		nil,
		ec.marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_facility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_specifications(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_specifications,
		func(ctx context.Context) (any, error) {
			return obj.Specifications, nil
		},
		nil,
		ec.marshalNEquipmentSpecifications2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecifications,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_specifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "powerConsumption":
				return ec.fieldContext_EquipmentSpecifications_powerConsumption(ctx, field)
			case "maxSpeed":
				return ec.fieldContext_EquipmentSpecifications_maxSpeed(ctx, field)
			case "operatingTemperature":
				return ec.fieldContext_EquipmentSpecifications_operatingTemperature(ctx, field)
			case "weight":
				return ec.fieldContext_EquipmentSpecifications_weight(ctx, field)
			case "dimensions":
				return ec.fieldContext_EquipmentSpecifications_dimensions(ctx, field)
			case "electricalSpecs":
				return ec.fieldContext_EquipmentSpecifications_electricalSpecs(ctx, field)
			case "environmentalRequirements":
				return ec.fieldContext_EquipmentSpecifications_environmentalRequirements(ctx, field)
			case "certifications":
				return ec.fieldContext_EquipmentSpecifications_certifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EquipmentSpecifications", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_installedAt(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_installedAt,
		func(ctx context.Context) (any, error) {
			return obj.InstalledAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_installedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_lastMaintenanceAt(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_lastMaintenanceAt,
		func(ctx context.Context) (any, error) {
			return obj.LastMaintenanceAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Equipment_lastMaintenanceAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_nextMaintenanceAt(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_nextMaintenanceAt,
		func(ctx context.Context) (any, error) {
			return obj.NextMaintenanceAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Equipment_nextMaintenanceAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_efficiency(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_efficiency,
		func(ctx context.Context) (any, error) {
			return obj.Efficiency, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_efficiency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_totalOperatingHours(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_totalOperatingHours,
		func(ctx context.Context) (any, error) {
			return obj.TotalOperatingHours, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_totalOperatingHours(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_maintenanceRecords(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_maintenanceRecords,
		func(ctx context.Context) (any, error) {
			return obj.MaintenanceRecords, nil
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecordᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_maintenanceRecords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Equipment_alerts(ctx context.Context, field graphql.CollectedField, obj *models.Equipment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Equipment_alerts,
		func(ctx context.Context) (any, error) {
			return obj.Alerts, nil
		},
		nil,
		ec.marshalNEquipmentAlert2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Equipment_alerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Equipment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EquipmentAlert_id(ctx, field)
			case "equipment":
				return ec.fieldContext_EquipmentAlert_equipment(ctx, field)
			case "type":
				return ec.fieldContext_EquipmentAlert_type(ctx, field)
			case "severity":
				return ec.fieldContext_EquipmentAlert_severity(ctx, field)
			case "description":
				return ec.fieldContext_EquipmentAlert_description(ctx, field)
			case "generatedAt":
				return ec.fieldContext_EquipmentAlert_generatedAt(ctx, field)
			case "acknowledged":
				return ec.fieldContext_EquipmentAlert_acknowledged(ctx, field)
			case "acknowledgedAt":
				return ec.fieldContext_EquipmentAlert_acknowledgedAt(ctx, field)
			case "acknowledgedBy":
				return ec.fieldContext_EquipmentAlert_acknowledgedBy(ctx, field)
			case "resolved":
				return ec.fieldContext_EquipmentAlert_resolved(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_EquipmentAlert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EquipmentAlert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_id(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_equipment(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_type(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNAlertType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_severity(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_severity,
		func(ctx context.Context) (any, error) {
			return obj.Severity, nil
		},
		nil,
		ec.marshalNAlertSeverity2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertSeverity,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_severity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertSeverity does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_description(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_generatedAt(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_generatedAt,
		func(ctx context.Context) (any, error) {
			return obj.GeneratedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_generatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_acknowledged(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_acknowledged,
		func(ctx context.Context) (any, error) {
			return obj.Acknowledged, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_acknowledged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_acknowledgedAt(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_acknowledgedAt,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_acknowledgedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_acknowledgedBy(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_acknowledgedBy,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_acknowledgedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_resolved(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_resolved,
		func(ctx context.Context) (any, error) {
			return obj.Resolved, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_resolved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentAlert_resolvedAt(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentAlert_resolvedAt,
		func(ctx context.Context) (any, error) {
			return obj.ResolvedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_EquipmentAlert_resolvedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_powerConsumption(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_powerConsumption,
		func(ctx context.Context) (any, error) {
			return obj.PowerConsumption, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_powerConsumption(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_maxSpeed(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_maxSpeed,
		func(ctx context.Context) (any, error) {
			return obj.MaxSpeed, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_maxSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_operatingTemperature(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_operatingTemperature,
		func(ctx context.Context) (any, error) {
			return obj.OperatingTemperature, nil
		},
		nil,
		ec.marshalNTemperatureRange2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐTemperatureRange,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_operatingTemperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_TemperatureRange_min(ctx, field)
			case "max":
				return ec.fieldContext_TemperatureRange_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TemperatureRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_weight(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_weight,
		func(ctx context.Context) (any, error) {
			return obj.Weight, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_weight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_dimensions(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_dimensions,
		func(ctx context.Context) (any, error) {
			return obj.Dimensions, nil
		},
		nil,
		ec.marshalNDimensions2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐDimensions,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_dimensions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "length":
				return ec.fieldContext_Dimensions_length(ctx, field)
			case "width":
				return ec.fieldContext_Dimensions_width(ctx, field)
			case "height":
				return ec.fieldContext_Dimensions_height(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Dimensions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_electricalSpecs(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_electricalSpecs,
		func(ctx context.Context) (any, error) {
			return obj.ElectricalSpecs, nil
		},
		nil,
		ec.marshalNElectricalSpecs2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐElectricalSpecs,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_electricalSpecs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "voltage":
				return ec.fieldContext_ElectricalSpecs_voltage(ctx, field)
			case "current":
				return ec.fieldContext_ElectricalSpecs_current(ctx, field)
			case "powerFactor":
				return ec.fieldContext_ElectricalSpecs_powerFactor(ctx, field)
			case "frequency":
				return ec.fieldContext_ElectricalSpecs_frequency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ElectricalSpecs", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_environmentalRequirements(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_environmentalRequirements,
		func(ctx context.Context) (any, error) {
			return obj.EnvironmentalRequirements, nil
		},
		nil,
		ec.marshalNString2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_environmentalRequirements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EquipmentSpecifications_certifications(ctx context.Context, field graphql.CollectedField, obj *models.EquipmentSpecifications) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EquipmentSpecifications_certifications,
		func(ctx context.Context) (any, error) {
			return obj.Certifications, nil
		},
		nil,
		ec.marshalNString2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EquipmentSpecifications_certifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EquipmentSpecifications",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_id(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_name(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_address(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_address,
		func(ctx context.Context) (any, error) {
			return obj.Address, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_location(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalNLocation2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "altitude":
				return ec.fieldContext_Location_altitude(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_capacity(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_capacity,
		func(ctx context.Context) (any, error) {
			return obj.Capacity, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_capacity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_utilization(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_utilization,
		func(ctx context.Context) (any, error) {
			return obj.Utilization, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_utilization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_status(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNFacilityOperationalStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityOperationalStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FacilityOperationalStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_operationalSince(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_operationalSince,
		func(ctx context.Context) (any, error) {
			return obj.OperationalSince, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_operationalSince(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_equipment(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_manager(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_manager,
		func(ctx context.Context) (any, error) {
			return obj.Manager, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_manager(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_contactInfo(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_contactInfo,
		func(ctx context.Context) (any, error) {
			return obj.ContactInfo, nil
		},
		nil,
		ec.marshalNContactInfo2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_contactInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "phone":
				return ec.fieldContext_ContactInfo_phone(ctx, field)
			case "email":
				return ec.fieldContext_ContactInfo_email(ctx, field)
			case "emergencyPhone":
				return ec.fieldContext_ContactInfo_emergencyPhone(ctx, field)
			case "managerContact":
				return ec.fieldContext_ContactInfo_managerContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_personnel(ctx context.Context, field graphql.CollectedField, obj *models.Facility) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Facility_personnel,
		func(ctx context.Context) (any, error) {
			return obj.Personnel, nil
		},
		nil,
		ec.marshalNPersonnel2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Facility_personnel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_facility(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_facility,
		func(ctx context.Context) (any, error) {
			return obj.Facility, nil
		},
		nil,
		ec.marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_facility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_status(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNFacilityOperationalStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityOperationalStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FacilityOperationalStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_equipmentRunning(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_equipmentRunning,
		func(ctx context.Context) (any, error) {
			return obj.EquipmentRunning, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_equipmentRunning(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_equipmentStopped(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_equipmentStopped,
		func(ctx context.Context) (any, error) {
			return obj.EquipmentStopped, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_equipmentStopped(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_equipmentInMaintenance(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_equipmentInMaintenance,
		func(ctx context.Context) (any, error) {
			return obj.EquipmentInMaintenance, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_equipmentInMaintenance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_activeAlerts(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_activeAlerts,
		func(ctx context.Context) (any, error) {
			return obj.ActiveAlerts, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_activeAlerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_productionRate(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_productionRate,
		func(ctx context.Context) (any, error) {
			return obj.ProductionRate, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_productionRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_efficiency(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_efficiency,
		func(ctx context.Context) (any, error) {
			return obj.Efficiency, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_efficiency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityStatus_lastUpdated(ctx context.Context, field graphql.CollectedField, obj *models.FacilityStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacilityStatus_lastUpdated,
		func(ctx context.Context) (any, error) {
			return obj.LastUpdated, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacilityStatus_lastUpdated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_latitude(ctx context.Context, field graphql.CollectedField, obj *models.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_latitude,
		func(ctx context.Context) (any, error) {
			return obj.Latitude, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_longitude(ctx context.Context, field graphql.CollectedField, obj *models.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_longitude,
		func(ctx context.Context) (any, error) {
			return obj.Longitude, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_altitude(ctx context.Context, field graphql.CollectedField, obj *models.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_altitude,
		func(ctx context.Context) (any, error) {
			return obj.Altitude, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Location_altitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_id(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_equipment(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_type(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNMaintenanceType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MaintenanceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_priority(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_priority,
		func(ctx context.Context) (any, error) {
			return obj.Priority, nil
		},
		nil,
		ec.marshalNMaintenancePriority2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MaintenancePriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_scheduledDate(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_scheduledDate,
		func(ctx context.Context) (any, error) {
			return obj.ScheduledDate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_scheduledDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_completedDate(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_completedDate,
		func(ctx context.Context) (any, error) {
			return obj.CompletedDate, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_completedDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_status(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNMaintenanceStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MaintenanceStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_description(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_assignedTechnician(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_assignedTechnician,
		func(ctx context.Context) (any, error) {
			return obj.AssignedTechnician, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_assignedTechnician(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_estimatedDuration(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_estimatedDuration,
		func(ctx context.Context) (any, error) {
			return obj.EstimatedDuration, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_estimatedDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_actualDuration(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_actualDuration,
		func(ctx context.Context) (any, error) {
			return obj.ActualDuration, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_actualDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_requiredParts(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_requiredParts,
		func(ctx context.Context) (any, error) {
			return obj.RequiredParts, nil
		},
		nil,
		ec.marshalNString2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_requiredParts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_cost(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_cost,
		func(ctx context.Context) (any, error) {
			return obj.Cost, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_cost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceRecord_notes(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceRecord) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceRecord_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceRecord_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_id(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_equipment(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_type(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNMaintenanceReminderType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceReminderType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MaintenanceReminderType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_priority(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_priority,
		func(ctx context.Context) (any, error) {
			return obj.Priority, nil
		},
		nil,
		ec.marshalNMaintenancePriority2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MaintenancePriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_description(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_scheduledDate(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_scheduledDate,
		func(ctx context.Context) (any, error) {
			return obj.ScheduledDate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_scheduledDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_acknowledged(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_acknowledged,
		func(ctx context.Context) (any, error) {
			return obj.Acknowledged, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_acknowledged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_acknowledgedAt(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_acknowledgedAt,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_acknowledgedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MaintenanceReminder_acknowledgedBy(ctx context.Context, field graphql.CollectedField, obj *models.MaintenanceReminder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MaintenanceReminder_acknowledgedBy,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MaintenanceReminder_acknowledgedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MaintenanceReminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_id(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_name(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_email(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_phone(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_phone,
		func(ctx context.Context) (any, error) {
			return obj.Phone, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_joinedAt(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_joinedAt,
		func(ctx context.Context) (any, error) {
			return obj.JoinedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_joinedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_status(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNPersonnelStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PersonnelStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_department(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_department,
		func(ctx context.Context) (any, error) {
			return obj.Department, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_department(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_directReports(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_directReports,
		func(ctx context.Context) (any, error) {
			return obj.DirectReports, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_directReports(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Manager_level(ctx context.Context, field graphql.CollectedField, obj *models.Manager) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Manager_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Manager_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Manager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEquipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createEquipment,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateEquipment(ctx, fc.Args["input"].(models.CreateEquipmentInput))
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createEquipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEquipment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEquipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateEquipment,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateEquipment(ctx, fc.Args["id"].(string), fc.Args["input"].(models.UpdateEquipmentInput))
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateEquipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEquipment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEquipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteEquipment,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteEquipment(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteEquipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEquipment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateFacility(ctx, fc.Args["input"].(models.CreateFacilityInput))
		},
		nil,
		ec.marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateFacility(ctx, fc.Args["id"].(string), fc.Args["input"].(models.UpdateFacilityInput))
		},
		nil,
		ec.marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteFacility(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_scheduleMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_scheduleMaintenance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ScheduleMaintenance(ctx, fc.Args["input"].(models.ScheduleMaintenanceInput))
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_scheduleMaintenance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_scheduleMaintenance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMaintenanceRecord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateMaintenanceRecord,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateMaintenanceRecord(ctx, fc.Args["id"].(string), fc.Args["input"].(models.UpdateMaintenanceRecordInput))
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateMaintenanceRecord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMaintenanceRecord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_completeMaintenance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_completeMaintenance,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CompleteMaintenance(ctx, fc.Args["id"].(string), fc.Args["input"].(models.CompleteMaintenanceInput))
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_completeMaintenance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_completeMaintenance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordOperationalMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_recordOperationalMetric,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RecordOperationalMetric(ctx, fc.Args["input"].(models.RecordOperationalMetricInput))
		},
		nil,
		ec.marshalNOperationalMetric2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetric,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_recordOperationalMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalMetric_id(ctx, field)
			case "equipment":
				return ec.fieldContext_OperationalMetric_equipment(ctx, field)
			case "metricType":
				return ec.fieldContext_OperationalMetric_metricType(ctx, field)
			case "value":
				return ec.fieldContext_OperationalMetric_value(ctx, field)
			case "unit":
				return ec.fieldContext_OperationalMetric_unit(ctx, field)
			case "recordedAt":
				return ec.fieldContext_OperationalMetric_recordedAt(ctx, field)
			case "targetValue":
				return ec.fieldContext_OperationalMetric_targetValue(ctx, field)
			case "meetsTarget":
				return ec.fieldContext_OperationalMetric_meetsTarget(ctx, field)
			case "notes":
				return ec.fieldContext_OperationalMetric_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalMetric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordOperationalMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEquipmentStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateEquipmentStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateEquipmentStatus(ctx, fc.Args["id"].(string), fc.Args["status"].(models.EquipmentStatus), fc.Args["notes"].(*string))
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateEquipmentStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEquipmentStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addManagerToFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addManagerToFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddManagerToFacility(ctx, fc.Args["facilityId"].(string), fc.Args["input"].(models.AddManagerInput))
		},
		nil,
		ec.marshalNManager2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐManager,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addManagerToFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Manager_id(ctx, field)
			case "name":
				return ec.fieldContext_Manager_name(ctx, field)
			case "email":
				return ec.fieldContext_Manager_email(ctx, field)
			case "phone":
				return ec.fieldContext_Manager_phone(ctx, field)
			case "joinedAt":
				return ec.fieldContext_Manager_joinedAt(ctx, field)
			case "status":
				return ec.fieldContext_Manager_status(ctx, field)
			case "department":
				return ec.fieldContext_Manager_department(ctx, field)
			case "directReports":
				return ec.fieldContext_Manager_directReports(ctx, field)
			case "level":
				return ec.fieldContext_Manager_level(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Manager", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addManagerToFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addAssociateToFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addAssociateToFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddAssociateToFacility(ctx, fc.Args["facilityId"].(string), fc.Args["input"].(models.AddAssociateInput))
		},
		nil,
		ec.marshalNAssociate2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAssociate,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addAssociateToFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Associate_id(ctx, field)
			case "name":
				return ec.fieldContext_Associate_name(ctx, field)
			case "email":
				return ec.fieldContext_Associate_email(ctx, field)
			case "phone":
				return ec.fieldContext_Associate_phone(ctx, field)
			case "joinedAt":
				return ec.fieldContext_Associate_joinedAt(ctx, field)
			case "status":
				return ec.fieldContext_Associate_status(ctx, field)
			case "jobTitle":
				return ec.fieldContext_Associate_jobTitle(ctx, field)
			case "department":
				return ec.fieldContext_Associate_department(ctx, field)
			case "reportsTo":
				return ec.fieldContext_Associate_reportsTo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Associate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addAssociateToFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removePersonnelFromFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_removePersonnelFromFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RemovePersonnelFromFacility(ctx, fc.Args["facilityId"].(string), fc.Args["personnelId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_removePersonnelFromFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removePersonnelFromFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addOrgChainToFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addOrgChainToFacility,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddOrgChainToFacility(ctx, fc.Args["facilityId"].(string), fc.Args["input"].(models.AddOrgChainInput))
		},
		nil,
		ec.marshalNPersonnel2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addOrgChainToFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addOrgChainToFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_id(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_equipment(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_metricType(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_metricType,
		func(ctx context.Context) (any, error) {
			return obj.MetricType, nil
		},
		nil,
		ec.marshalNMetricType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMetricType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_metricType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetricType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_value(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_unit(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_unit,
		func(ctx context.Context) (any, error) {
			return obj.Unit, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_recordedAt(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_recordedAt,
		func(ctx context.Context) (any, error) {
			return obj.RecordedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_recordedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_targetValue(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_targetValue,
		func(ctx context.Context) (any, error) {
			return obj.TargetValue, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_targetValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_meetsTarget(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_meetsTarget,
		func(ctx context.Context) (any, error) {
			return obj.MeetsTarget, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_meetsTarget(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalMetric_notes(ctx context.Context, field graphql.CollectedField, obj *models.OperationalMetric) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OperationalMetric_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OperationalMetric_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalMetric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_id(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_equipment(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_metricType(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_metricType,
		func(ctx context.Context) (any, error) {
			return obj.MetricType, nil
		},
		nil,
		ec.marshalNMetricType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMetricType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_metricType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MetricType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_currentValue(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_currentValue,
		func(ctx context.Context) (any, error) {
			return obj.CurrentValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_currentValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_expectedValue(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_expectedValue,
		func(ctx context.Context) (any, error) {
			return obj.ExpectedValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_expectedValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_threshold(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_threshold,
		func(ctx context.Context) (any, error) {
			return obj.Threshold, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_threshold(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_severity(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_severity,
		func(ctx context.Context) (any, error) {
			return obj.Severity, nil
		},
		nil,
		ec.marshalNAlertSeverity2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertSeverity,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_severity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertSeverity does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_description(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_generatedAt(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_generatedAt,
		func(ctx context.Context) (any, error) {
			return obj.GeneratedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_generatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_acknowledged(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_acknowledged,
		func(ctx context.Context) (any, error) {
			return obj.Acknowledged, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_acknowledged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_acknowledgedAt(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_acknowledgedAt,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedAt, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_acknowledgedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PerformanceAlert_acknowledgedBy(ctx context.Context, field graphql.CollectedField, obj *models.PerformanceAlert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PerformanceAlert_acknowledgedBy,
		func(ctx context.Context) (any, error) {
			return obj.AcknowledgedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PerformanceAlert_acknowledgedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PerformanceAlert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_equipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_equipment,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Equipment(ctx)
		},
		nil,
		ec.marshalNEquipment2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_equipmentById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_equipmentById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().EquipmentByID(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_equipmentById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_equipmentById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_facilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_facilities,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Facilities(ctx)
		},
		nil,
		ec.marshalNFacility2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_facilities(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_facilityById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_facilityById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FacilityByID(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_facilityById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "address":
				return ec.fieldContext_Facility_address(ctx, field)
			case "location":
				return ec.fieldContext_Facility_location(ctx, field)
			case "capacity":
				return ec.fieldContext_Facility_capacity(ctx, field)
			case "utilization":
				return ec.fieldContext_Facility_utilization(ctx, field)
			case "status":
				return ec.fieldContext_Facility_status(ctx, field)
			case "operationalSince":
				return ec.fieldContext_Facility_operationalSince(ctx, field)
			case "equipment":
				return ec.fieldContext_Facility_equipment(ctx, field)
			case "manager":
				return ec.fieldContext_Facility_manager(ctx, field)
			case "contactInfo":
				return ec.fieldContext_Facility_contactInfo(ctx, field)
			case "personnel":
				return ec.fieldContext_Facility_personnel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_facilityById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_maintenanceRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_maintenanceRecords,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().MaintenanceRecords(ctx)
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecordᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_maintenanceRecords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_maintenanceRecordsByEquipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_maintenanceRecordsByEquipment,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().MaintenanceRecordsByEquipment(ctx, fc.Args["equipmentId"].(string))
		},
		nil,
		ec.marshalNMaintenanceRecord2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecordᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_maintenanceRecordsByEquipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MaintenanceRecord_id(ctx, field)
			case "equipment":
				return ec.fieldContext_MaintenanceRecord_equipment(ctx, field)
			case "type":
				return ec.fieldContext_MaintenanceRecord_type(ctx, field)
			case "priority":
				return ec.fieldContext_MaintenanceRecord_priority(ctx, field)
			case "scheduledDate":
				return ec.fieldContext_MaintenanceRecord_scheduledDate(ctx, field)
			case "completedDate":
				return ec.fieldContext_MaintenanceRecord_completedDate(ctx, field)
			case "status":
				return ec.fieldContext_MaintenanceRecord_status(ctx, field)
			case "description":
				return ec.fieldContext_MaintenanceRecord_description(ctx, field)
			case "assignedTechnician":
				return ec.fieldContext_MaintenanceRecord_assignedTechnician(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_MaintenanceRecord_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_MaintenanceRecord_actualDuration(ctx, field)
			case "requiredParts":
				return ec.fieldContext_MaintenanceRecord_requiredParts(ctx, field)
			case "cost":
				return ec.fieldContext_MaintenanceRecord_cost(ctx, field)
			case "notes":
				return ec.fieldContext_MaintenanceRecord_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MaintenanceRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_maintenanceRecordsByEquipment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_operationalMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_operationalMetrics,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().OperationalMetrics(ctx)
		},
		nil,
		ec.marshalNOperationalMetric2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetricᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_operationalMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalMetric_id(ctx, field)
			case "equipment":
				return ec.fieldContext_OperationalMetric_equipment(ctx, field)
			case "metricType":
				return ec.fieldContext_OperationalMetric_metricType(ctx, field)
			case "value":
				return ec.fieldContext_OperationalMetric_value(ctx, field)
			case "unit":
				return ec.fieldContext_OperationalMetric_unit(ctx, field)
			case "recordedAt":
				return ec.fieldContext_OperationalMetric_recordedAt(ctx, field)
			case "targetValue":
				return ec.fieldContext_OperationalMetric_targetValue(ctx, field)
			case "meetsTarget":
				return ec.fieldContext_OperationalMetric_meetsTarget(ctx, field)
			case "notes":
				return ec.fieldContext_OperationalMetric_notes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalMetric", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_facilityStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_facilityStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().FacilityStatus(ctx, fc.Args["facilityId"].(string))
		},
		nil,
		ec.marshalOFacilityStatus2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityStatus,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_facilityStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "facility":
				return ec.fieldContext_FacilityStatus_facility(ctx, field)
			case "status":
				return ec.fieldContext_FacilityStatus_status(ctx, field)
			case "equipmentRunning":
				return ec.fieldContext_FacilityStatus_equipmentRunning(ctx, field)
			case "equipmentStopped":
				return ec.fieldContext_FacilityStatus_equipmentStopped(ctx, field)
			case "equipmentInMaintenance":
				return ec.fieldContext_FacilityStatus_equipmentInMaintenance(ctx, field)
			case "activeAlerts":
				return ec.fieldContext_FacilityStatus_activeAlerts(ctx, field)
			case "productionRate":
				return ec.fieldContext_FacilityStatus_productionRate(ctx, field)
			case "efficiency":
				return ec.fieldContext_FacilityStatus_efficiency(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_FacilityStatus_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacilityStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_facilityStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_personnel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_personnel,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Personnel(ctx)
		},
		nil,
		ec.marshalNPersonnel2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_personnel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_equipmentNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_equipmentNotifications,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().EquipmentNotifications(ctx)
		},
		nil,
		ec.marshalNEquipmentNotification2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentNotificationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_equipmentNotifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EquipmentNotification does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_id(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_equipment(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_equipment,
		func(ctx context.Context) (any, error) {
			return obj.Equipment, nil
		},
		nil,
		ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_equipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Equipment_id(ctx, field)
			case "name":
				return ec.fieldContext_Equipment_name(ctx, field)
			case "description":
				return ec.fieldContext_Equipment_description(ctx, field)
			case "manufacturer":
				return ec.fieldContext_Equipment_manufacturer(ctx, field)
			case "model":
				return ec.fieldContext_Equipment_model(ctx, field)
			case "serialNumber":
				return ec.fieldContext_Equipment_serialNumber(ctx, field)
			case "type":
				return ec.fieldContext_Equipment_type(ctx, field)
			case "status":
				return ec.fieldContext_Equipment_status(ctx, field)
			case "facility":
				return ec.fieldContext_Equipment_facility(ctx, field)
			case "specifications":
				return ec.fieldContext_Equipment_specifications(ctx, field)
			case "installedAt":
				return ec.fieldContext_Equipment_installedAt(ctx, field)
			case "lastMaintenanceAt":
				return ec.fieldContext_Equipment_lastMaintenanceAt(ctx, field)
			case "nextMaintenanceAt":
				return ec.fieldContext_Equipment_nextMaintenanceAt(ctx, field)
			case "efficiency":
				return ec.fieldContext_Equipment_efficiency(ctx, field)
			case "totalOperatingHours":
				return ec.fieldContext_Equipment_totalOperatingHours(ctx, field)
			case "maintenanceRecords":
				return ec.fieldContext_Equipment_maintenanceRecords(ctx, field)
			case "alerts":
				return ec.fieldContext_Equipment_alerts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Equipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_previousStatus(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_previousStatus,
		func(ctx context.Context) (any, error) {
			return obj.PreviousStatus, nil
		},
		nil,
		ec.marshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_previousStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EquipmentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_newStatus(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_newStatus,
		func(ctx context.Context) (any, error) {
			return obj.NewStatus, nil
		},
		nil,
		ec.marshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_newStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EquipmentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_description(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_changedAt(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_changedAt,
		func(ctx context.Context) (any, error) {
			return obj.ChangedAt, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_changedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_changedBy(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_changedBy,
		func(ctx context.Context) (any, error) {
			return obj.ChangedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_changedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StatusUpdate_notes(ctx context.Context, field graphql.CollectedField, obj *models.StatusUpdate) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StatusUpdate_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StatusUpdate_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StatusUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemperatureRange_min(ctx context.Context, field graphql.CollectedField, obj *models.TemperatureRange) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemperatureRange_min,
		func(ctx context.Context) (any, error) {
			return obj.Min, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TemperatureRange_min(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemperatureRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TemperatureRange_max(ctx context.Context, field graphql.CollectedField, obj *models.TemperatureRange) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TemperatureRange_max,
		func(ctx context.Context) (any, error) {
			return obj.Max, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TemperatureRange_max(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TemperatureRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddAssociateInput(ctx context.Context, obj any) (models.AddAssociateInput, error) {
	var it models.AddAssociateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["trainingRequired"]; !present {
		asMap["trainingRequired"] = true
	}

	fieldsInOrder := [...]string{"name", "email", "phone", "jobTitle", "department", "reportsToId", "joinedAt", "trainingRequired"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "jobTitle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTitle"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobTitle = data
		case "department":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Department = data
		case "reportsToId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reportsToId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReportsToID = data
		case "joinedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("joinedAt"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.JoinedAt = data
		case "trainingRequired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trainingRequired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrainingRequired = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddManagerInput(ctx context.Context, obj any) (models.AddManagerInput, error) {
	var it models.AddManagerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phone", "department", "level", "joinedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "department":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Department = data
		case "level":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Level = data
		case "joinedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("joinedAt"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.JoinedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddOrgChainInput(ctx context.Context, obj any) (models.AddOrgChainInput, error) {
	var it models.AddOrgChainInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"manager", "associate", "nextLevel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalOAddManagerInput2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "associate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("associate"))
			data, err := ec.unmarshalOAddAssociateInput2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Associate = data
		case "nextLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextLevel"))
			data, err := ec.unmarshalOAddOrgChainInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddOrgChainInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextLevel = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompleteMaintenanceInput(ctx context.Context, obj any) (models.CompleteMaintenanceInput, error) {
	var it models.CompleteMaintenanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"completedDate", "actualDuration", "cost", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "completedDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedDate"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletedDate = data
		case "actualDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actualDuration"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ActualDuration = data
		case "cost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cost = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactInfoInput(ctx context.Context, obj any) (models.ContactInfoInput, error) {
	var it models.ContactInfoInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"phone", "email", "emergencyPhone", "managerContact"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "emergencyPhone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emergencyPhone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmergencyPhone = data
		case "managerContact":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("managerContact"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ManagerContact = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEquipmentInput(ctx context.Context, obj any) (models.CreateEquipmentInput, error) {
	var it models.CreateEquipmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "manufacturer", "model", "serialNumber", "type", "facilityId", "specifications", "installedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "manufacturer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manufacturer = data
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "serialNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serialNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SerialNumber = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNEquipmentType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "facilityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacilityID = data
		case "specifications":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specifications"))
			data, err := ec.unmarshalNEquipmentSpecificationsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecificationsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Specifications = data
		case "installedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installedAt"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstalledAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFacilityInput(ctx context.Context, obj any) (models.CreateFacilityInput, error) {
	var it models.CreateFacilityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "address", "location", "capacity", "operationalSince", "manager", "contactInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalNLocationInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "operationalSince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationalSince"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OperationalSince = data
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "contactInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactInfo"))
			data, err := ec.unmarshalNContactInfoInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactInfo = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDimensionsInput(ctx context.Context, obj any) (models.DimensionsInput, error) {
	var it models.DimensionsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"length", "width", "height"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "length":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Length = data
		case "width":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Width = data
		case "height":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Height = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricalSpecsInput(ctx context.Context, obj any) (models.ElectricalSpecsInput, error) {
	var it models.ElectricalSpecsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"voltage", "current", "powerFactor", "frequency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "voltage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voltage"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Voltage = data
		case "current":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Current = data
		case "powerFactor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("powerFactor"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PowerFactor = data
		case "frequency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frequency"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Frequency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEquipmentSpecificationsInput(ctx context.Context, obj any) (models.EquipmentSpecificationsInput, error) {
	var it models.EquipmentSpecificationsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"powerConsumption", "maxSpeed", "operatingTemperature", "weight", "dimensions", "electricalSpecs", "environmentalRequirements", "certifications"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "powerConsumption":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("powerConsumption"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PowerConsumption = data
		case "maxSpeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxSpeed"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxSpeed = data
		case "operatingTemperature":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operatingTemperature"))
			data, err := ec.unmarshalNTemperatureRangeInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐTemperatureRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OperatingTemperature = data
		case "weight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Weight = data
		case "dimensions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimensions"))
			data, err := ec.unmarshalNDimensionsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐDimensionsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dimensions = data
		case "electricalSpecs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electricalSpecs"))
			data, err := ec.unmarshalNElectricalSpecsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐElectricalSpecsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ElectricalSpecs = data
		case "environmentalRequirements":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environmentalRequirements"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnvironmentalRequirements = data
		case "certifications":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifications"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Certifications = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationInput(ctx context.Context, obj any) (models.LocationInput, error) {
	var it models.LocationInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"latitude", "longitude", "altitude"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "latitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "longitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		case "altitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("altitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Altitude = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecordOperationalMetricInput(ctx context.Context, obj any) (models.RecordOperationalMetricInput, error) {
	var it models.RecordOperationalMetricInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"equipmentId", "metricType", "value", "unit", "targetValue", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "equipmentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipmentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EquipmentID = data
		case "metricType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricType"))
			data, err := ec.unmarshalNMetricType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMetricType(ctx, v)
			if err != nil {
				return it, err
			}
			it.MetricType = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "unit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Unit = data
		case "targetValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetValue"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetValue = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScheduleMaintenanceInput(ctx context.Context, obj any) (models.ScheduleMaintenanceInput, error) {
	var it models.ScheduleMaintenanceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"equipmentId", "type", "priority", "scheduledDate", "description", "assignedTechnician", "estimatedDuration", "requiredParts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "equipmentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipmentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EquipmentID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNMaintenanceType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalNMaintenancePriority2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "scheduledDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scheduledDate"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ScheduledDate = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "assignedTechnician":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedTechnician"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedTechnician = data
		case "estimatedDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedDuration"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedDuration = data
		case "requiredParts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredParts"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredParts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTemperatureRangeInput(ctx context.Context, obj any) (models.TemperatureRangeInput, error) {
	var it models.TemperatureRangeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEquipmentInput(ctx context.Context, obj any) (models.UpdateEquipmentInput, error) {
	var it models.UpdateEquipmentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "manufacturer", "model", "serialNumber", "type", "facilityId", "specifications", "installedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "manufacturer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manufacturer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manufacturer = data
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "serialNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serialNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SerialNumber = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOEquipmentType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "facilityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacilityID = data
		case "specifications":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("specifications"))
			data, err := ec.unmarshalOEquipmentSpecificationsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecificationsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Specifications = data
		case "installedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("installedAt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InstalledAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFacilityInput(ctx context.Context, obj any) (models.UpdateFacilityInput, error) {
	var it models.UpdateFacilityInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "address", "location", "capacity", "operationalSince", "manager", "contactInfo"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOLocationInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "capacity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "operationalSince":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationalSince"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OperationalSince = data
		case "manager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("manager"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Manager = data
		case "contactInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactInfo"))
			data, err := ec.unmarshalOContactInfoInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactInfo = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMaintenanceRecordInput(ctx context.Context, obj any) (models.UpdateMaintenanceRecordInput, error) {
	var it models.UpdateMaintenanceRecordInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "priority", "scheduledDate", "description", "assignedTechnician", "estimatedDuration", "requiredParts", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOMaintenanceType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalOMaintenancePriority2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "scheduledDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scheduledDate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ScheduledDate = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "assignedTechnician":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedTechnician"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AssignedTechnician = data
		case "estimatedDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedDuration = data
		case "requiredParts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredParts"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredParts = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOMaintenanceStatus2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _EquipmentNotification(ctx context.Context, sel ast.SelectionSet, obj models.EquipmentNotification) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case models.StatusUpdate:
		return ec._StatusUpdate(ctx, sel, &obj)
	case *models.StatusUpdate:
		if obj == nil {
			return graphql.Null
		}
		return ec._StatusUpdate(ctx, sel, obj)
	case models.PerformanceAlert:
		return ec._PerformanceAlert(ctx, sel, &obj)
	case *models.PerformanceAlert:
		if obj == nil {
			return graphql.Null
		}
		return ec._PerformanceAlert(ctx, sel, obj)
	case models.MaintenanceReminder:
		return ec._MaintenanceReminder(ctx, sel, &obj)
	case *models.MaintenanceReminder:
		if obj == nil {
			return graphql.Null
		}
		return ec._MaintenanceReminder(ctx, sel, obj)
	case models.EquipmentAlert:
		return ec._EquipmentAlert(ctx, sel, &obj)
	case *models.EquipmentAlert:
		if obj == nil {
			return graphql.Null
		}
		return ec._EquipmentAlert(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Personnel(ctx context.Context, sel ast.SelectionSet, obj models.Personnel) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case models.Manager:
		return ec._Manager(ctx, sel, &obj)
	case *models.Manager:
		if obj == nil {
			return graphql.Null
		}
		return ec._Manager(ctx, sel, obj)
	case models.Associate:
		return ec._Associate(ctx, sel, &obj)
	case *models.Associate:
		if obj == nil {
			return graphql.Null
		}
		return ec._Associate(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var associateImplementors = []string{"Associate", "Personnel"}

func (ec *executionContext) _Associate(ctx context.Context, sel ast.SelectionSet, obj *models.Associate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, associateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Associate")
		case "id":
			out.Values[i] = ec._Associate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Associate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Associate_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._Associate_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "joinedAt":
			out.Values[i] = ec._Associate_joinedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Associate_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jobTitle":
			out.Values[i] = ec._Associate_jobTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "department":
			out.Values[i] = ec._Associate_department(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reportsTo":
			out.Values[i] = ec._Associate_reportsTo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactInfoImplementors = []string{"ContactInfo"}

func (ec *executionContext) _ContactInfo(ctx context.Context, sel ast.SelectionSet, obj *models.ContactInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactInfo")
		case "phone":
			out.Values[i] = ec._ContactInfo_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._ContactInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emergencyPhone":
			out.Values[i] = ec._ContactInfo_emergencyPhone(ctx, field, obj)
		case "managerContact":
			out.Values[i] = ec._ContactInfo_managerContact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dimensionsImplementors = []string{"Dimensions"}

func (ec *executionContext) _Dimensions(ctx context.Context, sel ast.SelectionSet, obj *models.Dimensions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dimensionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dimensions")
		case "length":
			out.Values[i] = ec._Dimensions_length(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "width":
			out.Values[i] = ec._Dimensions_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "height":
			out.Values[i] = ec._Dimensions_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var electricalSpecsImplementors = []string{"ElectricalSpecs"}

func (ec *executionContext) _ElectricalSpecs(ctx context.Context, sel ast.SelectionSet, obj *models.ElectricalSpecs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricalSpecsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricalSpecs")
		case "voltage":
			out.Values[i] = ec._ElectricalSpecs_voltage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "current":
			out.Values[i] = ec._ElectricalSpecs_current(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "powerFactor":
			out.Values[i] = ec._ElectricalSpecs_powerFactor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "frequency":
			out.Values[i] = ec._ElectricalSpecs_frequency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var equipmentImplementors = []string{"Equipment"}

func (ec *executionContext) _Equipment(ctx context.Context, sel ast.SelectionSet, obj *models.Equipment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equipmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Equipment")
		case "id":
			out.Values[i] = ec._Equipment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Equipment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Equipment_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "manufacturer":
			out.Values[i] = ec._Equipment_manufacturer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "model":
			out.Values[i] = ec._Equipment_model(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "serialNumber":
			out.Values[i] = ec._Equipment_serialNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Equipment_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Equipment_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "facility":
			out.Values[i] = ec._Equipment_facility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "specifications":
			out.Values[i] = ec._Equipment_specifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "installedAt":
			out.Values[i] = ec._Equipment_installedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastMaintenanceAt":
			out.Values[i] = ec._Equipment_lastMaintenanceAt(ctx, field, obj)
		case "nextMaintenanceAt":
			out.Values[i] = ec._Equipment_nextMaintenanceAt(ctx, field, obj)
		case "efficiency":
			out.Values[i] = ec._Equipment_efficiency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalOperatingHours":
			out.Values[i] = ec._Equipment_totalOperatingHours(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maintenanceRecords":
			out.Values[i] = ec._Equipment_maintenanceRecords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "alerts":
			out.Values[i] = ec._Equipment_alerts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var equipmentAlertImplementors = []string{"EquipmentAlert", "EquipmentNotification"}

func (ec *executionContext) _EquipmentAlert(ctx context.Context, sel ast.SelectionSet, obj *models.EquipmentAlert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equipmentAlertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EquipmentAlert")
		case "id":
			out.Values[i] = ec._EquipmentAlert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._EquipmentAlert_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._EquipmentAlert_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "severity":
			out.Values[i] = ec._EquipmentAlert_severity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._EquipmentAlert_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generatedAt":
			out.Values[i] = ec._EquipmentAlert_generatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledged":
			out.Values[i] = ec._EquipmentAlert_acknowledged(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledgedAt":
			out.Values[i] = ec._EquipmentAlert_acknowledgedAt(ctx, field, obj)
		case "acknowledgedBy":
			out.Values[i] = ec._EquipmentAlert_acknowledgedBy(ctx, field, obj)
		case "resolved":
			out.Values[i] = ec._EquipmentAlert_resolved(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resolvedAt":
			out.Values[i] = ec._EquipmentAlert_resolvedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var equipmentSpecificationsImplementors = []string{"EquipmentSpecifications"}

func (ec *executionContext) _EquipmentSpecifications(ctx context.Context, sel ast.SelectionSet, obj *models.EquipmentSpecifications) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, equipmentSpecificationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EquipmentSpecifications")
		case "powerConsumption":
			out.Values[i] = ec._EquipmentSpecifications_powerConsumption(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxSpeed":
			out.Values[i] = ec._EquipmentSpecifications_maxSpeed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "operatingTemperature":
			out.Values[i] = ec._EquipmentSpecifications_operatingTemperature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "weight":
			out.Values[i] = ec._EquipmentSpecifications_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dimensions":
			out.Values[i] = ec._EquipmentSpecifications_dimensions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "electricalSpecs":
			out.Values[i] = ec._EquipmentSpecifications_electricalSpecs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "environmentalRequirements":
			out.Values[i] = ec._EquipmentSpecifications_environmentalRequirements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "certifications":
			out.Values[i] = ec._EquipmentSpecifications_certifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facilityImplementors = []string{"Facility"}

func (ec *executionContext) _Facility(ctx context.Context, sel ast.SelectionSet, obj *models.Facility) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Facility")
		case "id":
			out.Values[i] = ec._Facility_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Facility_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._Facility_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location":
			out.Values[i] = ec._Facility_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "capacity":
			out.Values[i] = ec._Facility_capacity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "utilization":
			out.Values[i] = ec._Facility_utilization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Facility_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "operationalSince":
			out.Values[i] = ec._Facility_operationalSince(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._Facility_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "manager":
			out.Values[i] = ec._Facility_manager(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contactInfo":
			out.Values[i] = ec._Facility_contactInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "personnel":
			out.Values[i] = ec._Facility_personnel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facilityStatusImplementors = []string{"FacilityStatus"}

func (ec *executionContext) _FacilityStatus(ctx context.Context, sel ast.SelectionSet, obj *models.FacilityStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacilityStatus")
		case "facility":
			out.Values[i] = ec._FacilityStatus_facility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._FacilityStatus_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipmentRunning":
			out.Values[i] = ec._FacilityStatus_equipmentRunning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipmentStopped":
			out.Values[i] = ec._FacilityStatus_equipmentStopped(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipmentInMaintenance":
			out.Values[i] = ec._FacilityStatus_equipmentInMaintenance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activeAlerts":
			out.Values[i] = ec._FacilityStatus_activeAlerts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productionRate":
			out.Values[i] = ec._FacilityStatus_productionRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "efficiency":
			out.Values[i] = ec._FacilityStatus_efficiency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastUpdated":
			out.Values[i] = ec._FacilityStatus_lastUpdated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *models.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "latitude":
			out.Values[i] = ec._Location_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "longitude":
			out.Values[i] = ec._Location_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "altitude":
			out.Values[i] = ec._Location_altitude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var maintenanceRecordImplementors = []string{"MaintenanceRecord"}

func (ec *executionContext) _MaintenanceRecord(ctx context.Context, sel ast.SelectionSet, obj *models.MaintenanceRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, maintenanceRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaintenanceRecord")
		case "id":
			out.Values[i] = ec._MaintenanceRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._MaintenanceRecord_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._MaintenanceRecord_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priority":
			out.Values[i] = ec._MaintenanceRecord_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "scheduledDate":
			out.Values[i] = ec._MaintenanceRecord_scheduledDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completedDate":
			out.Values[i] = ec._MaintenanceRecord_completedDate(ctx, field, obj)
		case "status":
			out.Values[i] = ec._MaintenanceRecord_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MaintenanceRecord_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignedTechnician":
			out.Values[i] = ec._MaintenanceRecord_assignedTechnician(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "estimatedDuration":
			out.Values[i] = ec._MaintenanceRecord_estimatedDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "actualDuration":
			out.Values[i] = ec._MaintenanceRecord_actualDuration(ctx, field, obj)
		case "requiredParts":
			out.Values[i] = ec._MaintenanceRecord_requiredParts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._MaintenanceRecord_cost(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._MaintenanceRecord_notes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var maintenanceReminderImplementors = []string{"MaintenanceReminder", "EquipmentNotification"}

func (ec *executionContext) _MaintenanceReminder(ctx context.Context, sel ast.SelectionSet, obj *models.MaintenanceReminder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, maintenanceReminderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MaintenanceReminder")
		case "id":
			out.Values[i] = ec._MaintenanceReminder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._MaintenanceReminder_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._MaintenanceReminder_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priority":
			out.Values[i] = ec._MaintenanceReminder_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._MaintenanceReminder_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MaintenanceReminder_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "scheduledDate":
			out.Values[i] = ec._MaintenanceReminder_scheduledDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledged":
			out.Values[i] = ec._MaintenanceReminder_acknowledged(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledgedAt":
			out.Values[i] = ec._MaintenanceReminder_acknowledgedAt(ctx, field, obj)
		case "acknowledgedBy":
			out.Values[i] = ec._MaintenanceReminder_acknowledgedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var managerImplementors = []string{"Manager", "Personnel"}

func (ec *executionContext) _Manager(ctx context.Context, sel ast.SelectionSet, obj *models.Manager) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Manager")
		case "id":
			out.Values[i] = ec._Manager_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Manager_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Manager_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._Manager_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "joinedAt":
			out.Values[i] = ec._Manager_joinedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Manager_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "department":
			out.Values[i] = ec._Manager_department(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "directReports":
			out.Values[i] = ec._Manager_directReports(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "level":
			out.Values[i] = ec._Manager_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createEquipment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEquipment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEquipment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEquipment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteEquipment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEquipment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "scheduleMaintenance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_scheduleMaintenance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMaintenanceRecord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMaintenanceRecord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completeMaintenance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_completeMaintenance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordOperationalMetric":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordOperationalMetric(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEquipmentStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEquipmentStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addManagerToFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addManagerToFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addAssociateToFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addAssociateToFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removePersonnelFromFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removePersonnelFromFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addOrgChainToFacility":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addOrgChainToFacility(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var operationalMetricImplementors = []string{"OperationalMetric"}

func (ec *executionContext) _OperationalMetric(ctx context.Context, sel ast.SelectionSet, obj *models.OperationalMetric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationalMetricImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationalMetric")
		case "id":
			out.Values[i] = ec._OperationalMetric_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._OperationalMetric_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metricType":
			out.Values[i] = ec._OperationalMetric_metricType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._OperationalMetric_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unit":
			out.Values[i] = ec._OperationalMetric_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordedAt":
			out.Values[i] = ec._OperationalMetric_recordedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "targetValue":
			out.Values[i] = ec._OperationalMetric_targetValue(ctx, field, obj)
		case "meetsTarget":
			out.Values[i] = ec._OperationalMetric_meetsTarget(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notes":
			out.Values[i] = ec._OperationalMetric_notes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var performanceAlertImplementors = []string{"PerformanceAlert", "EquipmentNotification"}

func (ec *executionContext) _PerformanceAlert(ctx context.Context, sel ast.SelectionSet, obj *models.PerformanceAlert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, performanceAlertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PerformanceAlert")
		case "id":
			out.Values[i] = ec._PerformanceAlert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._PerformanceAlert_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metricType":
			out.Values[i] = ec._PerformanceAlert_metricType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentValue":
			out.Values[i] = ec._PerformanceAlert_currentValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expectedValue":
			out.Values[i] = ec._PerformanceAlert_expectedValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "threshold":
			out.Values[i] = ec._PerformanceAlert_threshold(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "severity":
			out.Values[i] = ec._PerformanceAlert_severity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._PerformanceAlert_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generatedAt":
			out.Values[i] = ec._PerformanceAlert_generatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledged":
			out.Values[i] = ec._PerformanceAlert_acknowledged(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledgedAt":
			out.Values[i] = ec._PerformanceAlert_acknowledgedAt(ctx, field, obj)
		case "acknowledgedBy":
			out.Values[i] = ec._PerformanceAlert_acknowledgedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "equipment":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_equipment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "equipmentById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_equipmentById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "facilities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_facilities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "facilityById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_facilityById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "maintenanceRecords":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_maintenanceRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "maintenanceRecordsByEquipment":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_maintenanceRecordsByEquipment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "operationalMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operationalMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "facilityStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_facilityStatus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "personnel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_personnel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "equipmentNotifications":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_equipmentNotifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var statusUpdateImplementors = []string{"StatusUpdate", "EquipmentNotification"}

func (ec *executionContext) _StatusUpdate(ctx context.Context, sel ast.SelectionSet, obj *models.StatusUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statusUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatusUpdate")
		case "id":
			out.Values[i] = ec._StatusUpdate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "equipment":
			out.Values[i] = ec._StatusUpdate_equipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "previousStatus":
			out.Values[i] = ec._StatusUpdate_previousStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newStatus":
			out.Values[i] = ec._StatusUpdate_newStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._StatusUpdate_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changedAt":
			out.Values[i] = ec._StatusUpdate_changedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changedBy":
			out.Values[i] = ec._StatusUpdate_changedBy(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._StatusUpdate_notes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var temperatureRangeImplementors = []string{"TemperatureRange"}

func (ec *executionContext) _TemperatureRange(ctx context.Context, sel ast.SelectionSet, obj *models.TemperatureRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, temperatureRangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TemperatureRange")
		case "min":
			out.Values[i] = ec._TemperatureRange_min(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max":
			out.Values[i] = ec._TemperatureRange_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddAssociateInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput(ctx context.Context, v any) (models.AddAssociateInput, error) {
	res, err := ec.unmarshalInputAddAssociateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddManagerInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput(ctx context.Context, v any) (models.AddManagerInput, error) {
	res, err := ec.unmarshalInputAddManagerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddOrgChainInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddOrgChainInput(ctx context.Context, v any) (models.AddOrgChainInput, error) {
	res, err := ec.unmarshalInputAddOrgChainInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAlertSeverity2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertSeverity(ctx context.Context, v any) (models.AlertSeverity, error) {
	var res models.AlertSeverity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertSeverity2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertSeverity(ctx context.Context, sel ast.SelectionSet, v models.AlertSeverity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAlertType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertType(ctx context.Context, v any) (models.AlertType, error) {
	var res models.AlertType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAlertType(ctx context.Context, sel ast.SelectionSet, v models.AlertType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAssociate2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAssociate(ctx context.Context, sel ast.SelectionSet, v models.Associate) graphql.Marshaler {
	return ec._Associate(ctx, sel, &v)
}

func (ec *executionContext) marshalNAssociate2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAssociate(ctx context.Context, sel ast.SelectionSet, v *models.Associate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Associate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCompleteMaintenanceInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCompleteMaintenanceInput(ctx context.Context, v any) (models.CompleteMaintenanceInput, error) {
	res, err := ec.unmarshalInputCompleteMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContactInfo2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfo(ctx context.Context, sel ast.SelectionSet, v *models.ContactInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContactInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContactInfoInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfoInput(ctx context.Context, v any) (*models.ContactInfoInput, error) {
	res, err := ec.unmarshalInputContactInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEquipmentInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCreateEquipmentInput(ctx context.Context, v any) (models.CreateEquipmentInput, error) {
	res, err := ec.unmarshalInputCreateEquipmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFacilityInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐCreateFacilityInput(ctx context.Context, v any) (models.CreateFacilityInput, error) {
	res, err := ec.unmarshalInputCreateFacilityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDimensions2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐDimensions(ctx context.Context, sel ast.SelectionSet, v *models.Dimensions) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Dimensions(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDimensionsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐDimensionsInput(ctx context.Context, v any) (*models.DimensionsInput, error) {
	res, err := ec.unmarshalInputDimensionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNElectricalSpecs2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐElectricalSpecs(ctx context.Context, sel ast.SelectionSet, v *models.ElectricalSpecs) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ElectricalSpecs(ctx, sel, v)
}

func (ec *executionContext) unmarshalNElectricalSpecsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐElectricalSpecsInput(ctx context.Context, v any) (*models.ElectricalSpecsInput, error) {
	res, err := ec.unmarshalInputElectricalSpecsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEquipment2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment(ctx context.Context, sel ast.SelectionSet, v models.Equipment) graphql.Marshaler {
	return ec._Equipment(ctx, sel, &v)
}

func (ec *executionContext) marshalNEquipment2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Equipment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment(ctx context.Context, sel ast.SelectionSet, v *models.Equipment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Equipment(ctx, sel, v)
}

func (ec *executionContext) marshalNEquipmentAlert2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.EquipmentAlert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEquipmentAlert2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEquipmentAlert2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentAlert(ctx context.Context, sel ast.SelectionSet, v *models.EquipmentAlert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EquipmentAlert(ctx, sel, v)
}

func (ec *executionContext) marshalNEquipmentNotification2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentNotification(ctx context.Context, sel ast.SelectionSet, v models.EquipmentNotification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EquipmentNotification(ctx, sel, v)
}

func (ec *executionContext) marshalNEquipmentNotification2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []models.EquipmentNotification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEquipmentNotification2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEquipmentSpecifications2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecifications(ctx context.Context, sel ast.SelectionSet, v *models.EquipmentSpecifications) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EquipmentSpecifications(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEquipmentSpecificationsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecificationsInput(ctx context.Context, v any) (*models.EquipmentSpecificationsInput, error) {
	res, err := ec.unmarshalInputEquipmentSpecificationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus(ctx context.Context, v any) (models.EquipmentStatus, error) {
	var res models.EquipmentStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEquipmentStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentStatus(ctx context.Context, sel ast.SelectionSet, v models.EquipmentStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEquipmentType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx context.Context, v any) (models.EquipmentType, error) {
	var res models.EquipmentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEquipmentType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx context.Context, sel ast.SelectionSet, v models.EquipmentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFacility2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility(ctx context.Context, sel ast.SelectionSet, v models.Facility) graphql.Marshaler {
	return ec._Facility(ctx, sel, &v)
}

func (ec *executionContext) marshalNFacility2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Facility) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility(ctx context.Context, sel ast.SelectionSet, v *models.Facility) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Facility(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFacilityOperationalStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityOperationalStatus(ctx context.Context, v any) (models.FacilityOperationalStatus, error) {
	var res models.FacilityOperationalStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFacilityOperationalStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityOperationalStatus(ctx context.Context, sel ast.SelectionSet, v models.FacilityOperationalStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocation(ctx context.Context, sel ast.SelectionSet, v *models.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocationInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocationInput(ctx context.Context, v any) (*models.LocationInput, error) {
	res, err := ec.unmarshalInputLocationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMaintenancePriority2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx context.Context, v any) (models.MaintenancePriority, error) {
	var res models.MaintenancePriority
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMaintenancePriority2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx context.Context, sel ast.SelectionSet, v models.MaintenancePriority) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMaintenanceRecord2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v models.MaintenanceRecord) graphql.Marshaler {
	return ec._MaintenanceRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNMaintenanceRecord2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.MaintenanceRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMaintenanceRecord2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMaintenanceRecord2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceRecord(ctx context.Context, sel ast.SelectionSet, v *models.MaintenanceRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MaintenanceRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMaintenanceReminderType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceReminderType(ctx context.Context, v any) (models.MaintenanceReminderType, error) {
	var res models.MaintenanceReminderType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMaintenanceReminderType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceReminderType(ctx context.Context, sel ast.SelectionSet, v models.MaintenanceReminderType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMaintenanceStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus(ctx context.Context, v any) (models.MaintenanceStatus, error) {
	var res models.MaintenanceStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMaintenanceStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus(ctx context.Context, sel ast.SelectionSet, v models.MaintenanceStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMaintenanceType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx context.Context, v any) (models.MaintenanceType, error) {
	var res models.MaintenanceType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMaintenanceType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx context.Context, sel ast.SelectionSet, v models.MaintenanceType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNManager2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐManager(ctx context.Context, sel ast.SelectionSet, v models.Manager) graphql.Marshaler {
	return ec._Manager(ctx, sel, &v)
}

func (ec *executionContext) marshalNManager2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐManager(ctx context.Context, sel ast.SelectionSet, v *models.Manager) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Manager(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMetricType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMetricType(ctx context.Context, v any) (models.MetricType, error) {
	var res models.MetricType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetricType2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMetricType(ctx context.Context, sel ast.SelectionSet, v models.MetricType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOperationalMetric2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetric(ctx context.Context, sel ast.SelectionSet, v models.OperationalMetric) graphql.Marshaler {
	return ec._OperationalMetric(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperationalMetric2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetricᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OperationalMetric) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperationalMetric2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOperationalMetric2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐOperationalMetric(ctx context.Context, sel ast.SelectionSet, v *models.OperationalMetric) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperationalMetric(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonnel2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnel(ctx context.Context, sel ast.SelectionSet, v models.Personnel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Personnel(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonnel2ᚕgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelᚄ(ctx context.Context, sel ast.SelectionSet, v []models.Personnel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPersonnel2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPersonnelStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelStatus(ctx context.Context, v any) (models.PersonnelStatus, error) {
	var res models.PersonnelStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPersonnelStatus2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐPersonnelStatus(ctx context.Context, sel ast.SelectionSet, v models.PersonnelStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecordOperationalMetricInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐRecordOperationalMetricInput(ctx context.Context, v any) (models.RecordOperationalMetricInput, error) {
	res, err := ec.unmarshalInputRecordOperationalMetricInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNScheduleMaintenanceInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐScheduleMaintenanceInput(ctx context.Context, v any) (models.ScheduleMaintenanceInput, error) {
	res, err := ec.unmarshalInputScheduleMaintenanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTemperatureRange2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐTemperatureRange(ctx context.Context, sel ast.SelectionSet, v *models.TemperatureRange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TemperatureRange(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTemperatureRangeInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐTemperatureRangeInput(ctx context.Context, v any) (*models.TemperatureRangeInput, error) {
	res, err := ec.unmarshalInputTemperatureRangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEquipmentInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateEquipmentInput(ctx context.Context, v any) (models.UpdateEquipmentInput, error) {
	res, err := ec.unmarshalInputUpdateEquipmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFacilityInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateFacilityInput(ctx context.Context, v any) (models.UpdateFacilityInput, error) {
	res, err := ec.unmarshalInputUpdateFacilityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMaintenanceRecordInput2githubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐUpdateMaintenanceRecordInput(ctx context.Context, v any) (models.UpdateMaintenanceRecordInput, error) {
	res, err := ec.unmarshalInputUpdateMaintenanceRecordInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddAssociateInput2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput(ctx context.Context, v any) ([]*models.AddAssociateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*models.AddAssociateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAddAssociateInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAddAssociateInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddAssociateInput(ctx context.Context, v any) (*models.AddAssociateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddAssociateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAddManagerInput2ᚕᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput(ctx context.Context, v any) ([]*models.AddManagerInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*models.AddManagerInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAddManagerInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAddManagerInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddManagerInput(ctx context.Context, v any) (*models.AddManagerInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddManagerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAddOrgChainInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐAddOrgChainInput(ctx context.Context, v any) (*models.AddOrgChainInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddOrgChainInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOContactInfoInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐContactInfoInput(ctx context.Context, v any) (*models.ContactInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputContactInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEquipment2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipment(ctx context.Context, sel ast.SelectionSet, v *models.Equipment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Equipment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEquipmentSpecificationsInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentSpecificationsInput(ctx context.Context, v any) (*models.EquipmentSpecificationsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEquipmentSpecificationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEquipmentType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx context.Context, v any) (*models.EquipmentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.EquipmentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEquipmentType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐEquipmentType(ctx context.Context, sel ast.SelectionSet, v *models.EquipmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFacility2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacility(ctx context.Context, sel ast.SelectionSet, v *models.Facility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Facility(ctx, sel, v)
}

func (ec *executionContext) marshalOFacilityStatus2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐFacilityStatus(ctx context.Context, sel ast.SelectionSet, v *models.FacilityStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FacilityStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalFloat(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOLocationInput2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐLocationInput(ctx context.Context, v any) (*models.LocationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLocationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMaintenancePriority2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx context.Context, v any) (*models.MaintenancePriority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.MaintenancePriority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMaintenancePriority2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenancePriority(ctx context.Context, sel ast.SelectionSet, v *models.MaintenancePriority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMaintenanceStatus2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus(ctx context.Context, v any) (*models.MaintenanceStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.MaintenanceStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMaintenanceStatus2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceStatus(ctx context.Context, sel ast.SelectionSet, v *models.MaintenanceStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMaintenanceType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx context.Context, v any) (*models.MaintenanceType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.MaintenanceType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMaintenanceType2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐMaintenanceType(ctx context.Context, sel ast.SelectionSet, v *models.MaintenanceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOManager2ᚖgithubᚗcomᚋpeterbeamishᚋgoᚑmcpᚑgraphqlᚋexampleᚋgqlgenᚑserverᚋmodelsᚐManager(ctx context.Context, sel ast.SelectionSet, v *models.Manager) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Manager(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
